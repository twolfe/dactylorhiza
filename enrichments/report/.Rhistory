allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01",topNodes = 100)
allRes.CC2 = cbind(allRes.CC1,"CC")
allRes.CC = change_names(data = allRes.CC2, name_list = name_list)
allRes1 = rbind(allRes.BP,allRes.MF)
allRes = rbind(allRes1, allRes.CC)
allGO.BP = genesInTerm(GOdata.BP)
allGO.BP = genesInTerm(GOdata.BP)
allGO.BP = genesInTerm(GOdata.BP)
allGO = c(allGO.BP, allGO.MF, allGO.CC)
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  deGenes])
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  deGenes])
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", ")
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes)
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term, "Genes" = as.vector(enriched_go_with_my_genes.list), "adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE)))
EC.genelist = data.frame("ID" = rownames(resEdgeRtopTags$table), "logFC" = resEdgeRtopTags$table$logFC, "AveExpr" = rowMeans(dat.filtered[rownames(resEdgeRtopTags$table),]), "P.Value" = resEdgeRtopTags$table$PValue, "adj.P.Val" = resEdgeRtopTags$table$F)
go.dataframe
EC.genelist
EC.genelist = data.frame("ID" = rownames(resEdgeRtopTags), "logFC" = resEdgeRtopTags$logFC, "AveExpr" = rowMeans(dat.filtered[rownames(resEdgeRtopTags),]), "P.Value" = resEdgeRtopTags$PValue, "adj.P.Val" = resEdgeRtopTags$F)
EC.genelist
go.dataframe$adj_pval
circ = circle_dat(go.dataframe, EC.genelist)
go.dataframe
circ = circle_dat(go.dataframe, EC.genelist)
deGenes
allGO
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  deGenes$V1])
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", ")
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes)
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term, "Genes" = as.vector(enriched_go_with_my_genes.list), "adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE)))
EC.genelist = data.frame("ID" = rownames(resEdgeRtopTags), "logFC" = resEdgeRtopTags$logFC, "AveExpr" = rowMeans(dat.filtered[rownames(resEdgeRtopTags),]), "P.Value" = resEdgeRtopTags$PValue, "adj.P.Val" = resEdgeRtopTags$F)
plan <- drake_plan(
name_list = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
table = as.factor(geneNames) %in% deGenes$V1,
int_table = as.integer(table),
int_fac_table = factor(int_table),
fac_table = rename(table = int_fac_table, geneNames = geneNames),
GOdata.BP = new("topGOdata", ontology = "BP", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.MF = new("topGOdata", ontology = "MF", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.CC = new("topGOdata", ontology = "CC", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
resultWeight01.BP = runTest(GOdata.BP, statistic = "fisher"),
resultWeight01.MF = runTest(GOdata.MF, statistic = "fisher"),
resultWeight01.CC = runTest(GOdata.CC, statistic = "fisher"),
allRes.BP1 = GenTable(GOdata.BP, weight01_pval=resultWeight01.BP, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.BP2 = cbind(allRes.BP1,"BP"),
allRes.BP = change_names(data = allRes.BP2, name_list = name_list),
allRes.MF1 = GenTable(GOdata.MF, weight01_pval=resultWeight01.MF, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.MF2 = cbind(allRes.MF1,"MF"),
allRes.MF = change_names(data = allRes.MF2, name_list = name_list),
allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.CC2 = cbind(allRes.CC1,"CC"),
allRes.CC = change_names(data = allRes.CC2, name_list = name_list),
#colnames(allRes.CC) = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
allRes1 = rbind(allRes.BP,allRes.MF),
allRes = rbind(allRes1, allRes.CC),
allGO.BP = genesInTerm(GOdata.BP),
allGO.MF = genesInTerm(GOdata.MF),
allGO.CC = genesInTerm(GOdata.CC),
allGO = c(allGO.BP, allGO.MF, allGO.CC),
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  deGenes$V1]),
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", "),
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes),
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term, "Genes" = as.vector(enriched_go_with_my_genes.list), "adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE))),
EC.genelist = data.frame("ID" = rownames(resEdgeRtopTags$table), "logFC" = resEdgeRtopTags$table$logFC, "AveExpr" = rowMeans(dat.filtered[rownames(resEdgeRtopTags$table),]), "P.Value" = resEdgeRtopTags$table$PValue, "adj.P.Val" = resEdgeRtopTags$table$F),
circ = circle_dat(go.dataframe, EC.genelist)
#BP = topGoAnalysis("BP", fac_table, geneID2GO, 100),
#MF = topGoAnalysis("MF", fac_table, geneID2GO, 100),
#CC = topGoAnalysis("CC", fac_table, geneID2GO, 100),
#allRes1 = rbind(BP, MF),
#allRes2 = rbind(allRes1, CC),
#allRes_scientific = format(allRes2, scientific = TRUE),
#allRes_scientific_weight01_pval = allRes_scientific$weight01_pval,
#allRes1_weight01_pval = as.double(allRes_scientific_weight01_pval),
#allRes_sign = allRes1[allRes1$weight01_pval <= 0.05,]
)
make(plan)
circ = circle_dat(go.dataframe, EC.genelist)
circ
GOplot::GOBar(circ, zsc.col = c("blue", "white", "red"))
GOplot::GOCircle(subset(circ, category == 'BP' | category == 'MF'), lfc.col = c("blue", "red"))
circ.BP.CC.MF <- rbind(subset(circ, category == "BP"), subset(circ, category == "CC"), subset(circ, category == "MF"))
reduced_circ <- reduce_overlap(circ.BP.CC.MF, overlap = 0.6)
GOplot::GOBar(reduced_circ, zsc.col = c("blue", "white", "red"))
reduced_circ <- reduce_overlap(circ.BP.CC.MF, overlap = 0.8)
GOplot::GOBar(reduced_circ, zsc.col = c("blue", "white", "red"))
reduced_circ <- reduce_overlap(circ.BP.CC.MF, overlap = 0.3)
GOplot::GOBar(reduced_circ, zsc.col = c("blue", "white", "red"))
reduced_circ <- reduce_overlap(circ.BP.CC.MF, overlap = 0.1)
GOplot::GOBar(reduced_circ, zsc.col = c("blue", "white", "red"))
GOplot::GOBar(subset(reduced_circ, category == 'BP'), zsc.col = c("blue", "white", "red"))
reduced_circ <- reduce_overlap(circ.BP.CC.MF, overlap = 0.9)
GOplot::GOBar(subset(reduced_circ, category == 'BP'), zsc.col = c("blue", "white", "red"))
reduced_circ <- reduce_overlap(circ.BP.CC.MF, overlap = 0.5)
GOplot::GOBar(subset(reduced_circ, category == 'BP'), zsc.col = c("blue", "white", "red"))
reduced_circ <- reduce_overlap(circ.BP.CC.MF, overlap = 0.1)
GOplot::GOBar(subset(reduced_circ, category == 'BP'), zsc.col = c("blue", "white", "red"))
GOplot::GOBar(subset(reduced_circ, category == 'CC'), zsc.col = c("blue", "white", "red"))
GOplot::GOBar(subset(reduced_circ, category == 'MF'), zsc.col = c("blue", "white", "red"))
reduced_circ
subset(reduced_circ, category == 'BP')
write.table(file = "/home/thomas/Documents/phd/de/enrichments/report/bp-goplot.txt", subset(reduced_circ, category == 'BP'))
write.table(file = "/home/thomas/Documents/phd/de/enrichments/report/bp-goplot.txt", subset(reduced_circ, category == 'BP'), sep = "\t")
reduced_circ <- reduce_overlap(circ.BP.CC.MF, overlap = 0.6)
GOplot::GOBar(subset(reduced_circ, category == 'MF'), zsc.col = c("blue", "white", "red"))
GOplot::GOBar(subset(reduced_circ, category == 'BP'), zsc.col = c("blue", "white", "red"))
reduced_circ <- reduce_overlap(circ.BP.CC.MF, overlap = 0.8)
reduced_circ <- reduce_overlap(subset(circ, category == "BP"), overlap = 0.8)
GOplot::GOBar(subset(reduced_circ, category == 'BP'), zsc.col = c("blue", "white", "red"))
subset(circ, category == 'BP')
reduce_overlap(subset(circ, category == "BP"), overlap = 0.8)
reduced_circ <- reduce_overlap(subset(circ, category == "BP"), overlap = 0.6)
GOplot::GOBar(subset(reduced_circ, category == 'BP'), zsc.col = c("blue", "white", "red"))
write.table(file = "/home/thomas/Documents/phd/de/enrichments/report/bp-goplot.txt", subset(reduced_circ, category == 'BP'), sep = "\t")
#GENOME STUFF
geneID2GO <- readMappings(file = "/home/thomas/Documents/phd/de/enrichments/all_annotations_justGO.txt")
GO2geneID <- inverseList(geneID2GO)
################ TOPGO ####################################################
library("topGO")
library("GOplot")
#library(ALL)
library("xtable")
library("drake")
pkgconfig::set_config("drake::strings_in_dots" = "literals")
## if you need to rerun everything
## drake::clean(destroy = TRUE)
source("/home/thomas/Documents/phd/de/enrichments/src/functions.R")
#GENOME STUFF
geneID2GO <- readMappings(file = "/home/thomas/Documents/phd/de/enrichments/all_annotations_justGO.txt")
GO2geneID <- inverseList(geneID2GO)
geneNames <- names(geneID2GO)
deGenes <- read.table("/home/thomas/Documents/phd/de/enrichments/both.transcripts.de.txt")
resEdgeRtopTags <- read.table("/home/thomas/Documents/phd/de/52KPS/counts52KPS_de_results.txt")
dat.filtered <- read.table("/home/thomas/Documents/phd/de/enrichments/datFileredCounts.txt", header = T)
head(geneNames)
plan <- drake_plan(
name_list = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
table = as.factor(geneNames) %in% deGenes$V1,
int_table = as.integer(table),
int_fac_table = factor(int_table),
fac_table = rename(table = int_fac_table, geneNames = geneNames),
GOdata.BP = new("topGOdata", ontology = "BP", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.MF = new("topGOdata", ontology = "MF", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.CC = new("topGOdata", ontology = "CC", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
resultWeight01.BP = runTest(GOdata.BP, statistic = "fisher"),
resultWeight01.MF = runTest(GOdata.MF, statistic = "fisher"),
resultWeight01.CC = runTest(GOdata.CC, statistic = "fisher"),
allRes.BP1 = GenTable(GOdata.BP, weight01_pval=resultWeight01.BP, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.BP2 = cbind(allRes.BP1,"BP"),
allRes.BP = change_names(data = allRes.BP2, name_list = name_list),
allRes.MF1 = GenTable(GOdata.MF, weight01_pval=resultWeight01.MF, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.MF2 = cbind(allRes.MF1,"MF"),
allRes.MF = change_names(data = allRes.MF2, name_list = name_list),
allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.CC2 = cbind(allRes.CC1,"CC"),
allRes.CC = change_names(data = allRes.CC2, name_list = name_list),
#colnames(allRes.CC) = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
allRes1 = rbind(allRes.BP,allRes.MF),
allRes = rbind(allRes1, allRes.CC),
allGO.BP = genesInTerm(GOdata.BP),
allGO.MF = genesInTerm(GOdata.MF),
allGO.CC = genesInTerm(GOdata.CC),
allGO = c(allGO.BP, allGO.MF, allGO.CC),
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  deGenes$V1]),
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", "),
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes),
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term, "Genes" = as.vector(enriched_go_with_my_genes.list), "adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE))),
EC.genelist = data.frame("ID" = rownames(resEdgeRtopTags$table), "logFC" = resEdgeRtopTags$table$logFC, "AveExpr" = rowMeans(dat.filtered[rownames(resEdgeRtopTags$table),]), "P.Value" = resEdgeRtopTags$table$PValue, "adj.P.Val" = resEdgeRtopTags$table$F),
circ = circle_dat(go.dataframe, EC.genelist)
#BP = topGoAnalysis("BP", fac_table, geneID2GO, 100),
#MF = topGoAnalysis("MF", fac_table, geneID2GO, 100),
#CC = topGoAnalysis("CC", fac_table, geneID2GO, 100),
#allRes1 = rbind(BP, MF),
#allRes2 = rbind(allRes1, CC),
#allRes_scientific = format(allRes2, scientific = TRUE),
#allRes_scientific_weight01_pval = allRes_scientific$weight01_pval,
#allRes1_weight01_pval = as.double(allRes_scientific_weight01_pval),
#allRes_sign = allRes1[allRes1$weight01_pval <= 0.05,]
)
make(plan)
make(plan, force = TRUE)
head(resEdgeRtopTags)
head(allres)
head(allRes)
head(allRes1)
head(allGo)
clean(destroy = TRUE)
make(plan, force = TRUE)
make(plan)
plan <- drake_plan(
name_list = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
table = as.factor(geneNames) %in% deGenes$V1,
int_table = as.integer(table),
int_fac_table = factor(int_table),
fac_table = rename(table = int_fac_table, geneNames = geneNames),
GOdata.BP = new("topGOdata", ontology = "BP", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.MF = new("topGOdata", ontology = "MF", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.CC = new("topGOdata", ontology = "CC", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
resultWeight01.BP = runTest(GOdata.BP, statistic = "fisher"),
resultWeight01.MF = runTest(GOdata.MF, statistic = "fisher"),
resultWeight01.CC = runTest(GOdata.CC, statistic = "fisher"),
allRes.BP1 = GenTable(GOdata.BP, weight01_pval=resultWeight01.BP, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.BP2 = cbind(allRes.BP1,"BP"),
allRes.BP = change_names(data = allRes.BP2, name_list = name_list),
allRes.MF1 = GenTable(GOdata.MF, weight01_pval=resultWeight01.MF, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.MF2 = cbind(allRes.MF1,"MF"),
allRes.MF = change_names(data = allRes.MF2, name_list = name_list),
allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.CC2 = cbind(allRes.CC1,"CC"),
allRes.CC = change_names(data = allRes.CC2, name_list = name_list),
#colnames(allRes.CC) = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
allRes1 = rbind(allRes.BP,allRes.MF),
allRes = rbind(allRes1, allRes.CC),
allGO.BP = genesInTerm(GOdata.BP),
allGO.MF = genesInTerm(GOdata.MF),
allGO.CC = genesInTerm(GOdata.CC),
allGO = c(allGO.BP, allGO.MF, allGO.CC),
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  deGenes$V1]),
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", "),
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes),
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term, "Genes" = as.vector(enriched_go_with_my_genes.list), "adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE))),
EC.genelist = data.frame("ID" = rownames(resEdgeRtopTags), "logFC" = resEdgeRtopTags$logFC, "AveExpr" = rowMeans(dat.filtered[rownames(resEdgeRtopTags),]), "P.Value" = resEdgeRtopTags$PValue, "adj.P.Val" = resEdgeRtopTags$F),
circ = circle_dat(go.dataframe, EC.genelist)
#BP = topGoAnalysis("BP", fac_table, geneID2GO, 100),
#MF = topGoAnalysis("MF", fac_table, geneID2GO, 100),
#CC = topGoAnalysis("CC", fac_table, geneID2GO, 100),
#allRes1 = rbind(BP, MF),
#allRes2 = rbind(allRes1, CC),
#allRes_scientific = format(allRes2, scientific = TRUE),
#allRes_scientific_weight01_pval = allRes_scientific$weight01_pval,
#allRes1_weight01_pval = as.double(allRes_scientific_weight01_pval),
#allRes_sign = allRes1[allRes1$weight01_pval <= 0.05,]
)
make(plan, force = TRUE)
circ
GOplot::GOBar(subset(circ, category == 'BP'), zsc.col = c("blue", "white", "red"))
make(plan)
circ.BP.CC.MF
readd(circ)
circ <- readd(circ)
GOplot::GOBar(subset(circ, category == 'BP'), zsc.col = c("blue", "white", "red"))
reduced_circ <- reduce_overlap(subset(circ, category == "BP"), overlap = 0.6)
GOplot::GOBar(subset(reduced_circ, category == 'BP'), zsc.col = c("blue", "white", "red"))
subset(reduced_circ, category == 'BP')
subset(circ, category == 'BP')
subset(circ, category == "BP")
subset(reduced_circ, category == "BP")
subset(reduced_circ, category == "BP", count > 6)
subset(reduced_circ, count > 6)
subset(reduced_circ, count > 3)
GOplot::GOBar(subset(reduced_circ, count > 3), zsc.col = c("blue", "white", "red"))
order(subset(reduced_circ, count > 3)$zscores)
reduced_circ3 <- subset(reduced_circ, count > 3)
order(reduced_circ3$zscore)
order(reduced_circ3[reduced_circ3$zscore],)
order(reduced_circ3[reduced_circ3$zscore])
order(reduced_circ3[reduced_circ3$zscore,])
order(reduced_circ3[,reduced_circ3$zscore])
reduced_circ3[order(reduced_circ3$zscore),]
reduced_circ3[order(reduced_circ3$zscore),]
reduced_circ <- reduce_overlap(subset(circ, category == "BP"), overlap = 0.1)
reduced_circ3 <- subset(reduced_circ, count > 3)
reduced_circ3[order(reduced_circ3$zscore),]
reduced_circ <- reduce_overlap(subset(circ, category == "BP"), overlap = 0.8)
reduced_circ3 <- subset(reduced_circ, count > 3)
reduced_circ3[order(reduced_circ3$zscore),]
GOplot::GOBar(reduced_circ3, zsc.col = c("blue", "white", "red"))
sum(reduced_circ3$count)
reduced_circBP <- reduce_overlap(subset(circ, category == "BP"), overlap = 0.6)
reduced_circMF <- reduce_overlap(subset(circ, category == "MF"), overlap = 0.6)
reduced_circCC <- reduce_overlap(subset(circ, category == "CC"), overlap = 0.6)
reduced_circBP3 <- subset(reduced_circBP3, count > 3)
reduced_circBP3 <- subset(reduced_circBP, count > 3)
reduced_circMF3 <- subset(reduced_circMF, count > 3)
reduced_circCC3 <- subset(reduced_circCC, count > 3)
reduced_circMF3
reduced_circMF3[order(reduced_circMF3$zscore),]
reduced_circCC3[order(reduced_circCC3$zscore),]
reduced_circBP3[order(reduced_circBP3$zscore),]
library("tidyr")
cbind(reduced_circBP3, reduced_circCC3, reduced_circMF3)
rbind(reduced_circBP3, reduced_circCC3, reduced_circMF3)
GOBar(rbind(reduced_circBP3, reduced_circCC3, reduced_circMF3), display = 'multiple')
GOBar(rbind(reduced_circBP3, reduced_circCC3, reduced_circMF3), display = 'multiple', zsc.col = c("blue", "white", "red"))
GOBar(rbind(reduced_circBP3, reduced_circMF3, reduced_circCC3), display = 'multiple', zsc.col = c("blue", "white", "red"))
GOCircle(reduced_circBP3)
head(dat.filtered)
make(plan)
clean(plan)
drake::clean(destroy = TRUE)
make(plan)
circ <- readd(circ)
reduced_circ <- reduce_overlap(circ, overlap = 0.8)
GOplot::GOBar(subset(reduced_circ, category == 'BP'), zsc.col = c("blue", "white", "red"))
GOplot::GOCircle(subset(circ, category == 'BP' | category == 'MF'), lfc.col = c("blue", "red"))
GOplot::GOBar(subset(reduced_circ, category == 'BP'), zsc.col = c("blue", "white", "red"))
reduced_circ_counts <- subset(reduced_circ, count > 3)
GOplot::GOBar(subset(reduced_circ_counts, category == 'BP'), zsc.col = c("blue", "white", "red"))
GOplot::GOCircle(subset(reduced_circ, category == 'BP' | category == 'MF'), lfc.col = c("blue", "red"))
GOplot::GOCircle(subset(circ, category == 'BP' | category == 'MF'), lfc.col = c("blue", "red"))
GOplot::GOBar(subset(reduced_circ_counts, category == 'BP'), zsc.col = c("blue", "white", "red"), zsc.col = c("blue", "white", "red"))
GOplot::GOCircle(subset(circ, category == 'BP' | category == 'MF'), lfc.col = c("blue", "red"), zsc.col = c("blue", "white", "red"))
reduced_circ <- reduce_overlap(circ.BP.CC.MF, overlap = 0.8)
GOBubble(reduced_circ, labels = 4.5, display = 'multiple', table.legend = T)
# Retrieve the circ variable from the .drake folder.
circ <- readd(circ)
################ TOPGO ####################################################
library("topGO")
library("GOplot")
#library(ALL)
library("xtable")
library("drake")
pkgconfig::set_config("drake::strings_in_dots" = "literals")
## if you need to rerun everything
## drake::clean(destroy = TRUE)
source("functions.R")
#GENOME STUFF
geneID2GO <- readMappings(file = "/home/thomas/Documents/phd/de/enrichments/all_annotations_justGO.txt")
GO2geneID <- inverseList(geneID2GO)
geneNames <- names(geneID2GO)
deGenes <- read.table("/home/thomas/Documents/phd/de/enrichments/both.transcripts.de.txt")
resEdgeRtopTags <- read.table("/home/thomas/Documents/phd/de/52KPS/counts52KPS_de_results.txt")
dat.filtered <- read.table("/home/thomas/Documents/phd/de/enrichments/datFileredCounts.txt", header = T)
head(geneNames)
plan <- drake_plan(
name_list = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
table = as.factor(geneNames) %in% deGenes$V1,
int_table = as.integer(table),
int_fac_table = factor(int_table),
fac_table = rename(table = int_fac_table, geneNames = geneNames),
GOdata.BP = new("topGOdata", ontology = "BP", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.MF = new("topGOdata", ontology = "MF", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.CC = new("topGOdata", ontology = "CC", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
resultWeight01.BP = runTest(GOdata.BP, statistic = "fisher"),
resultWeight01.MF = runTest(GOdata.MF, statistic = "fisher"),
resultWeight01.CC = runTest(GOdata.CC, statistic = "fisher"),
allRes.BP1 = GenTable(GOdata.BP, weight01_pval=resultWeight01.BP, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.BP2 = cbind(allRes.BP1,"BP"),
allRes.BP = change_names(data = allRes.BP2, name_list = name_list),
allRes.MF1 = GenTable(GOdata.MF, weight01_pval=resultWeight01.MF, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.MF2 = cbind(allRes.MF1,"MF"),
allRes.MF = change_names(data = allRes.MF2, name_list = name_list),
allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.CC2 = cbind(allRes.CC1,"CC"),
allRes.CC = change_names(data = allRes.CC2, name_list = name_list),
#colnames(allRes.CC) = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
allRes1 = rbind(allRes.BP,allRes.MF),
allRes = rbind(allRes1, allRes.CC),
allGO.BP = genesInTerm(GOdata.BP),
allGO.MF = genesInTerm(GOdata.MF),
allGO.CC = genesInTerm(GOdata.CC),
allGO = c(allGO.BP, allGO.MF, allGO.CC),
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  deGenes$V1]),
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", "),
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes),
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term, "Genes" = as.vector(enriched_go_with_my_genes.list), "adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE))),
EC.genelist = data.frame("ID" = rownames(resEdgeRtopTags), "logFC" = resEdgeRtopTags$logFC, "AveExpr" = rowMeans(dat.filtered[rownames(resEdgeRtopTags),]), "P.Value" = resEdgeRtopTags$PValue, "adj.P.Val" = resEdgeRtopTags$F),
circ = circle_dat(go.dataframe, EC.genelist)
)
make(plan)
allGO <- readd(allGO)
head(allGO)
allRes <- readd(allRes)
head(allRes)
tail(allRes)
subset(allRes, branch == "BP")
subset(allRes, branch == "BP")$Significant
sum(subset(allRes, branch == "BP")$Significant)
sum(subset(allRes, branch == "BP")
)
help(runTest)
allGO
allRes
plan <- drake_plan(
name_list = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
table = as.factor(geneNames) %in% deGenes$V1,
int_table = as.integer(table),
int_fac_table = factor(int_table),
fac_table = rename(table = int_fac_table, geneNames = geneNames),
GOdata.BP = new("topGOdata", ontology = "BP", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.MF = new("topGOdata", ontology = "MF", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.CC = new("topGOdata", ontology = "CC", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
resultWeight01.BP = runTest(GOdata.BP, statistic = "fisher"),
resultWeight01.MF = runTest(GOdata.MF, statistic = "fisher"),
resultWeight01.CC = runTest(GOdata.CC, statistic = "fisher"),
allRes.BP1 = GenTable(GOdata.BP, weight01_pval=resultWeight01.BP, orderBy = "weight01", ranksOf = "weight01",topNodes = 500),
allRes.BP2 = cbind(allRes.BP1,"BP"),
allRes.BP = change_names(data = allRes.BP2, name_list = name_list),
allRes.MF1 = GenTable(GOdata.MF, weight01_pval=resultWeight01.MF, orderBy = "weight01", ranksOf = "weight01",topNodes = 500),
allRes.MF2 = cbind(allRes.MF1,"MF"),
allRes.MF = change_names(data = allRes.MF2, name_list = name_list),
allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01",topNodes = 500),
allRes.CC2 = cbind(allRes.CC1,"CC"),
allRes.CC = change_names(data = allRes.CC2, name_list = name_list),
#colnames(allRes.CC) = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
allRes1 = rbind(allRes.BP,allRes.MF),
allRes = rbind(allRes1, allRes.CC),
allRes = allRes[allRes$weight01_pval<=0.1,],
allGO.BP = genesInTerm(GOdata.BP),
allGO.MF = genesInTerm(GOdata.MF),
allGO.CC = genesInTerm(GOdata.CC),
allGO = c(allGO.BP, allGO.MF, allGO.CC),
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  deGenes$V1]),
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", "),
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes),
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term, "Genes" = as.vector(enriched_go_with_my_genes.list), "adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE))),
EC.genelist = data.frame("ID" = rownames(resEdgeRtopTags), "logFC" = resEdgeRtopTags$logFC, "AveExpr" = rowMeans(dat.filtered[rownames(resEdgeRtopTags),]), "P.Value" = resEdgeRtopTags$PValue, "adj.P.Val" = resEdgeRtopTags$F),
circ = circle_dat(go.dataframe, EC.genelist)
)
plan <- drake_plan(
name_list = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
table = as.factor(geneNames) %in% deGenes$V1,
int_table = as.integer(table),
int_fac_table = factor(int_table),
fac_table = rename(table = int_fac_table, geneNames = geneNames),
GOdata.BP = new("topGOdata", ontology = "BP", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.MF = new("topGOdata", ontology = "MF", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.CC = new("topGOdata", ontology = "CC", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
resultWeight01.BP = runTest(GOdata.BP, statistic = "fisher"),
resultWeight01.MF = runTest(GOdata.MF, statistic = "fisher"),
resultWeight01.CC = runTest(GOdata.CC, statistic = "fisher"),
allRes.BP1 = GenTable(GOdata.BP, weight01_pval=resultWeight01.BP, orderBy = "weight01", ranksOf = "weight01",topNodes = 500),
allRes.BP2 = cbind(allRes.BP1,"BP"),
allRes.BP = change_names(data = allRes.BP2, name_list = name_list),
allRes.MF1 = GenTable(GOdata.MF, weight01_pval=resultWeight01.MF, orderBy = "weight01", ranksOf = "weight01",topNodes = 500),
allRes.MF2 = cbind(allRes.MF1,"MF"),
allRes.MF = change_names(data = allRes.MF2, name_list = name_list),
allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01",topNodes = 500),
allRes.CC2 = cbind(allRes.CC1,"CC"),
allRes.CC = change_names(data = allRes.CC2, name_list = name_list),
#colnames(allRes.CC) = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
allRes1 = rbind(allRes.BP,allRes.MF),
allRes2 = rbind(allRes1, allRes.CC),
allRes = allRes2[allRes2$weight01_pval<=0.1,],
allGO.BP = genesInTerm(GOdata.BP),
allGO.MF = genesInTerm(GOdata.MF),
allGO.CC = genesInTerm(GOdata.CC),
allGO = c(allGO.BP, allGO.MF, allGO.CC),
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  deGenes$V1]),
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", "),
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes),
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term, "Genes" = as.vector(enriched_go_with_my_genes.list), "adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE))),
EC.genelist = data.frame("ID" = rownames(resEdgeRtopTags), "logFC" = resEdgeRtopTags$logFC, "AveExpr" = rowMeans(dat.filtered[rownames(resEdgeRtopTags),]), "P.Value" = resEdgeRtopTags$PValue, "adj.P.Val" = resEdgeRtopTags$F),
circ = circle_dat(go.dataframe, EC.genelist)
)
make(plan)
# Retrieve the circ variable from the .drake folder.
circ <- readd(circ)
circ
allRes <- readd(allRes)
allRes
# Work with the datframe.
reduced_circ <- reduce_overlap(circ, overlap = 0.8)
GOplot::GOBar(subset(reduced_circ, category == 'BP'), zsc.col = c("blue", "white", "red"))
reduced_circ_counts <- subset(reduced_circ, count > 3)
GOplot::GOBar(subset(reduced_circ, category == 'BP'), zsc.col = c("blue", "white", "red"))
GOplot::GOBar(subset(reduced_circ_counts, category == 'BP'), zsc.col = c("blue", "white", "red"))
reduced_circ_counts
subset(reduced_circ_counts, category == 'BP')
order(subset(reduced_circ_counts, category == 'BP'),zscore)
order(subset(reduced_circ_counts, category == 'BP'), zscore)
# Work with the datframe.
reduced_circ <- reduce_overlap(circ, overlap = 0.9)
reduced_circ_counts <- subset(reduced_circ, count > 3)
GOplot::GOBar(subset(reduced_circ, category == 'BP'), zsc.col = c("blue", "white", "red"))
GOplot::GOBar(subset(reduced_circ_counts, category == 'BP'), zsc.col = c("blue", "white", "red"))
# Work with the datframe.
reduced_circ <- reduce_overlap(circ, overlap = 0.3)
reduced_circ_counts <- subset(reduced_circ, count > 3)
GOplot::GOBar(subset(reduced_circ_counts, category == 'BP'), zsc.col = c("blue", "white", "red"))
# Work with the datframe.
reduced_circ <- reduce_overlap(circ, overlap = 0.99)
reduced_circ_counts <- subset(reduced_circ, count > 3)
GOplot::GOBar(subset(reduced_circ_counts, category == 'BP'), zsc.col = c("blue", "white", "red"))
reduced_circ_counts <- subset(circ, count > 3)
GOplot::GOBar(subset(reduced_circ_counts, category == 'BP'), zsc.col = c("blue", "white", "red"))
subset(reduced_circ_counts, category == 'BP')
subset(reduced_circ_counts, category == 'BP')
# Work with the datframe.
reduced_circ <- reduce_overlap(circ, overlap = 1.00)
reduced_circ_counts <- subset(reduced_circ, count > 3)
GOplot::GOBar(subset(reduced_circ, category == 'BP'), zsc.col = c("blue", "white", "red"))
GOplot::GOBar(subset(reduced_circ_counts, category == 'BP'), zsc.col = c("blue", "white", "red"))
subset(reduced_circ_counts, category == 'BP')
enrich <- subset(reduced_circ_counts, category == 'BP')
enrich[order(enrich$zscore),]
enrich[-order(enrich$zscore),]
enrich[order(-enrich$zscore),]
reduced_circ
reduced_circ_counts <- subset(reduced_circ, count > 2)
GOplot::GOBar(subset(reduced_circ_counts, category == 'BP'), zsc.col = c("blue", "white", "red"))
enrich <- subset(reduced_circ_counts, category == 'BP')
enrich[order(-enrich$zscore),]
enrich[order(-enrich$zscore),]
enrich[order(-enrich$zscore),]
write.table(enrich[order(-enrich$zscore),], file = "/home/thomas/Documents/phd/de/enrichments/report/bp.enrichments-fdr001-genes3.txt", sep="\t", quote = FALSE)
enrich[order(-enrich$zscore),]
enrich[order(-enrich$zscore),]$count
sum(enrich[order(-enrich$zscore),]$count)
# Work with the datframe.
reduced_circ <- reduce_overlap(circ, overlap = 1.00)
GOplot::GOBar(subset(reduced_circ, category == 'BP'), zsc.col = c("blue", "white", "red"))
subset(reduced_circ, category == 'BP')
subset(reduced_circ, category == 'BP')$genes
circ
write.tabe(circ, file = "/home/thomas/Documents/phd/de/enrichments/report/enrichment-all.txt")
write.table(circ, file = "/home/thomas/Documents/phd/de/enrichments/report/enrichment-all.txt", sep = "\t", quote = FALSE)
circ$count
reduced_circ$count
sum(reduced_circ$count)
# Work with the datframe.
reduced_circ <- reduce_overlap(circ, overlap = 1.00)
reduced_circ_counts <- subset(reduced_circ, count > 2)
GOplot::GOBar(subset(reduced_circ_counts, category == 'BP'), zsc.col = c("blue", "white", "red"))
