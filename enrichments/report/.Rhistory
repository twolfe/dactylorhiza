GOdata.CC = new("topGOdata", ontology = "CC", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
resultWeight01.BP = runTest(GOdata.BP, statistic = "fisher"),
resultWeight01.MF = runTest(GOdata.MF, statistic = "fisher"),
resultWeight01.CC = runTest(GOdata.CC, statistic = "fisher"),
allRes.BP1 = GenTable(GOdata.BP, weight01_pval=resultWeight01.BP, orderBy = "weight01", ranksOf = "weight01",topNodes = 39),
allRes.BP2 = cbind(allRes.BP1,"BP"),
allRes.BP = change_names(data = allRes.BP2, name_list = name_list),
allRes.MF1 = GenTable(GOdata.MF, weight01_pval=resultWeight01.MF, orderBy = "weight01", ranksOf = "weight01",topNodes = 35),
allRes.MF2 = cbind(allRes.MF1,"MF"),
allRes.MF = change_names(data = allRes.MF2, name_list = name_list),
allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01",topNodes = 22),
allRes.CC2 = cbind(allRes.CC1,"CC"),
allRes.CC = change_names(data = allRes.CC2, name_list = name_list),
#colnames(allRes.CC) = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
allRes1 = rbind(allRes.BP,allRes.MF),
allRes = rbind(allRes1, allRes.CC),
allGO.BP = genesInTerm(GOdata.BP),
allGO.MF = genesInTerm(GOdata.MF),
allGO.CC = genesInTerm(GOdata.CC),
allGO = c(allGO.BP, allGO.MF, allGO.CC),
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  deGenes]),
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", "),
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes),
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term, "Genes" = as.vector(enriched_go_with_my_genes.list), "adj_pval" = as.numeric(allRes$weight01_pval)),
EC.genelist = data.frame("ID" = rownames(resEdgeRtopTags$table), "logFC" = resEdgeRtopTags$table$logFC, "AveExpr" = rowMeans(dat.filtered[rownames(resEdgeRtopTags$table),]), "P.Value" = resEdgeRtopTags$table$PValue, "adj.P.Val" = resEdgeRtopTags$table$F),
circ = circle_dat(go.dataframe, EC.genelist)
#BP = topGoAnalysis("BP", fac_table, geneID2GO, 100),
#MF = topGoAnalysis("MF", fac_table, geneID2GO, 100),
#CC = topGoAnalysis("CC", fac_table, geneID2GO, 100),
#allRes1 = rbind(BP, MF),
#allRes2 = rbind(allRes1, CC),
#allRes_scientific = format(allRes2, scientific = TRUE),
#allRes_scientific_weight01_pval = allRes_scientific$weight01_pval,
#allRes1_weight01_pval = as.double(allRes_scientific_weight01_pval),
#allRes_sign = allRes1[allRes1$weight01_pval <= 0.05,]
)
make(plan)
plan <- drake_plan(
name_list = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
table = geneNames %in% deGenes,
int_table = as.integer(table),
int_fac_table = factor(int_table),
fac_table = rename(table = int_fac_table, geneNames = geneNames),
GOdata.BP = new("topGOdata", ontology = "BP", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.MF = new("topGOdata", ontology = "MF", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.CC = new("topGOdata", ontology = "CC", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
resultWeight01.BP = runTest(GOdata.BP, statistic = "fisher"),
resultWeight01.MF = runTest(GOdata.MF, statistic = "fisher"),
resultWeight01.CC = runTest(GOdata.CC, statistic = "fisher"),
allRes.BP1 = GenTable(GOdata.BP, weight01_pval=resultWeight01.BP, orderBy = "weight01", ranksOf = "weight01"),
allRes.BP2 = cbind(allRes.BP1,"BP"),
allRes.BP = change_names(data = allRes.BP2, name_list = name_list),
allRes.MF1 = GenTable(GOdata.MF, weight01_pval=resultWeight01.MF, orderBy = "weight01", ranksOf = "weight01"),
allRes.MF2 = cbind(allRes.MF1,"MF"),
allRes.MF = change_names(data = allRes.MF2, name_list = name_list),
allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01"),
allRes.CC2 = cbind(allRes.CC1,"CC"),
allRes.CC = change_names(data = allRes.CC2, name_list = name_list),
#colnames(allRes.CC) = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
allRes1 = rbind(allRes.BP,allRes.MF),
allRes = rbind(allRes1, allRes.CC),
allGO.BP = genesInTerm(GOdata.BP),
allGO.MF = genesInTerm(GOdata.MF),
allGO.CC = genesInTerm(GOdata.CC),
allGO = c(allGO.BP, allGO.MF, allGO.CC),
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  deGenes]),
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", "),
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes),
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term, "Genes" = as.vector(enriched_go_with_my_genes.list), "adj_pval" = as.numeric(allRes$weight01_pval)),
EC.genelist = data.frame("ID" = rownames(resEdgeRtopTags$table), "logFC" = resEdgeRtopTags$table$logFC, "AveExpr" = rowMeans(dat.filtered[rownames(resEdgeRtopTags$table),]), "P.Value" = resEdgeRtopTags$table$PValue, "adj.P.Val" = resEdgeRtopTags$table$F),
circ = circle_dat(go.dataframe, EC.genelist)
#BP = topGoAnalysis("BP", fac_table, geneID2GO, 100),
#MF = topGoAnalysis("MF", fac_table, geneID2GO, 100),
#CC = topGoAnalysis("CC", fac_table, geneID2GO, 100),
#allRes1 = rbind(BP, MF),
#allRes2 = rbind(allRes1, CC),
#allRes_scientific = format(allRes2, scientific = TRUE),
#allRes_scientific_weight01_pval = allRes_scientific$weight01_pval,
#allRes1_weight01_pval = as.double(allRes_scientific_weight01_pval),
#allRes_sign = allRes1[allRes1$weight01_pval <= 0.05,]
)
make(plan)
plan <- drake_plan(
name_list = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
table = geneNames %in% deGenes,
int_table = as.integer(table),
int_fac_table = factor(int_table),
fac_table = rename(table = int_fac_table, geneNames = geneNames),
GOdata.BP = new("topGOdata", ontology = "BP", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.MF = new("topGOdata", ontology = "MF", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.CC = new("topGOdata", ontology = "CC", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
resultWeight01.BP = runTest(GOdata.BP, statistic = "fisher"),
resultWeight01.MF = runTest(GOdata.MF, statistic = "fisher"),
resultWeight01.CC = runTest(GOdata.CC, statistic = "fisher"),
allRes.BP1 = GenTable(GOdata.BP, weight01_pval=resultWeight01.BP, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.BP2 = cbind(allRes.BP1,"BP"),
allRes.BP = change_names(data = allRes.BP2, name_list = name_list),
allRes.MF1 = GenTable(GOdata.MF, weight01_pval=resultWeight01.MF, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.MF2 = cbind(allRes.MF1,"MF"),
allRes.MF = change_names(data = allRes.MF2, name_list = name_list),
allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.CC2 = cbind(allRes.CC1,"CC"),
allRes.CC = change_names(data = allRes.CC2, name_list = name_list),
#colnames(allRes.CC) = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
allRes1 = rbind(allRes.BP,allRes.MF),
allRes = rbind(allRes1, allRes.CC),
allGO.BP = genesInTerm(GOdata.BP),
allGO.MF = genesInTerm(GOdata.MF),
allGO.CC = genesInTerm(GOdata.CC),
allGO = c(allGO.BP, allGO.MF, allGO.CC),
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  deGenes]),
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", "),
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes),
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term, "Genes" = as.vector(enriched_go_with_my_genes.list), "adj_pval" = as.numeric(allRes$weight01_pval)),
EC.genelist = data.frame("ID" = rownames(resEdgeRtopTags$table), "logFC" = resEdgeRtopTags$table$logFC, "AveExpr" = rowMeans(dat.filtered[rownames(resEdgeRtopTags$table),]), "P.Value" = resEdgeRtopTags$table$PValue, "adj.P.Val" = resEdgeRtopTags$table$F),
circ = circle_dat(go.dataframe, EC.genelist)
#BP = topGoAnalysis("BP", fac_table, geneID2GO, 100),
#MF = topGoAnalysis("MF", fac_table, geneID2GO, 100),
#CC = topGoAnalysis("CC", fac_table, geneID2GO, 100),
#allRes1 = rbind(BP, MF),
#allRes2 = rbind(allRes1, CC),
#allRes_scientific = format(allRes2, scientific = TRUE),
#allRes_scientific_weight01_pval = allRes_scientific$weight01_pval,
#allRes1_weight01_pval = as.double(allRes_scientific_weight01_pval),
#allRes_sign = allRes1[allRes1$weight01_pval <= 0.05,]
)
make(plan)
################ TOPGO ####################################################
library("topGO")
#library(ALL)
library("xtable")
library("drake")
pkgconfig::set_config("drake::strings_in_dots" = "literals")
normSet <- readRDS("/home/thomas/Documents/phd/scripts/enrichments/data/normSet.rds")
### FULL SET OF NON FILTERED TRANSCRIPTS ##########################################
geneID2GO <- readMappings(file = "/data/phdData/orchis/Orchis.transcriptome.go.annotation.topGO.map")
deGenes <- as.vector(deGenes$V1)
deGenes <- read.table("/data/phdData/orchis/counts/de.featureCounts/both.transcripts.de.txt")
################ TOPGO ####################################################
library("topGO")
library("GOplot")
#library(ALL)
library("xtable")
library("drake")
pkgconfig::set_config("drake::strings_in_dots" = "literals")
## if you need to rerun everything
## drake::clean(destroy = TRUE)
source("/home/thomas/Documents/phd/scripts/enrichments/src/functions.R")
#normSet <- readRDS("/home/thomas/Documents/phd/scripts/enrichments/data/normSet.rds")
### FULL SET OF NON FILTERED TRANSCRIPTS ##########################################
#geneID2GO <- readMappings(file = "/data/phdData/orchis/Orchis.transcriptome.go.annotation.topGO.map")
### REDUCED SET OF FILTERED TRANSCRIPTS ##########################################
#geneID2GO <- readMappings(file = "/data/phdData/orchis/counts/de.featureCounts/retained.after.filtering.go.map.txt")
geneID2GO <- readMappings(file = "/home/thomas/Documents/phd/scripts/enrichments/data/retained.genes.justGO.trinotate.txt")
deGenes <- read.table("/home/thomas/Documents/phd/scripts/enrichments/data/both.transcripts.de.txt")
deGenes <- as.vector(deGenes$V1)
### ON THE RUN ANALYSIS
#deGenes <- FDRres[FDRres$FDR <= 0.05,]
#env_gen_analysis<-readRDS("/home/botanik/Documents/phd/research/environmental_study/deEnviroCorrelations/2018/env_gen_analysis.RDS")
#finalenvmatrixrep <- readRDS("/home/botanik/Documents/phd/research/environmental_study/deEnviroCorrelations/2018/finalenvmatrixrep.RDS")
#treeCover <- readRDS("/home/botanik/Documents/phd/research/environmental_study/deEnviroCorrelations/2018/treecoverageDactpolyploids.RDS")
GO2geneID <- inverseList(geneID2GO)
geneNames <- names(geneID2GO)
head(geneNames)
#resEdgeRtopTags is the table found after running cleanDE.R
geneList <- factor(as.integer(geneNames %in% rownames(myInterestingGenes)))
plan <- drake_plan(
name_list = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
table = geneNames %in% deGenes,
int_table = as.integer(table),
int_fac_table = factor(int_table),
fac_table = rename(table = int_fac_table, geneNames = geneNames),
GOdata.BP = new("topGOdata", ontology = "BP", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.MF = new("topGOdata", ontology = "MF", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.CC = new("topGOdata", ontology = "CC", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
resultWeight01.BP = runTest(GOdata.BP, statistic = "fisher"),
resultWeight01.MF = runTest(GOdata.MF, statistic = "fisher"),
resultWeight01.CC = runTest(GOdata.CC, statistic = "fisher"),
allRes.BP1 = GenTable(GOdata.BP, weight01_pval=resultWeight01.BP, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.BP2 = cbind(allRes.BP1,"BP"),
allRes.BP = change_names(data = allRes.BP2, name_list = name_list),
allRes.MF1 = GenTable(GOdata.MF, weight01_pval=resultWeight01.MF, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.MF2 = cbind(allRes.MF1,"MF"),
allRes.MF = change_names(data = allRes.MF2, name_list = name_list),
allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.CC2 = cbind(allRes.CC1,"CC"),
allRes.CC = change_names(data = allRes.CC2, name_list = name_list),
#colnames(allRes.CC) = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
allRes1 = rbind(allRes.BP,allRes.MF),
allRes = rbind(allRes1, allRes.CC),
allGO.BP = genesInTerm(GOdata.BP),
allGO.MF = genesInTerm(GOdata.MF),
allGO.CC = genesInTerm(GOdata.CC),
allGO = c(allGO.BP, allGO.MF, allGO.CC),
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  deGenes]),
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", "),
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes),
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term, "Genes" = as.vector(enriched_go_with_my_genes.list), "adj_pval" = as.numeric(allRes$weight01_pval)),
EC.genelist = data.frame("ID" = rownames(resEdgeRtopTags$table), "logFC" = resEdgeRtopTags$table$logFC, "AveExpr" = rowMeans(dat.filtered[rownames(resEdgeRtopTags$table),]), "P.Value" = resEdgeRtopTags$table$PValue, "adj.P.Val" = resEdgeRtopTags$table$F),
circ = circle_dat(go.dataframe, EC.genelist)
#BP = topGoAnalysis("BP", fac_table, geneID2GO, 100),
#MF = topGoAnalysis("MF", fac_table, geneID2GO, 100),
#CC = topGoAnalysis("CC", fac_table, geneID2GO, 100),
#allRes1 = rbind(BP, MF),
#allRes2 = rbind(allRes1, CC),
#allRes_scientific = format(allRes2, scientific = TRUE),
#allRes_scientific_weight01_pval = allRes_scientific$weight01_pval,
#allRes1_weight01_pval = as.double(allRes_scientific_weight01_pval),
#allRes_sign = allRes1[allRes1$weight01_pval <= 0.05,]
)
make(plan)
resEdgeRtopTags <- readRDS("/home/thomas/Documents/phd/scripts/enrichments/data/all.results.rds")
plan <- drake_plan(
name_list = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
table = geneNames %in% deGenes,
int_table = as.integer(table),
int_fac_table = factor(int_table),
fac_table = rename(table = int_fac_table, geneNames = geneNames),
GOdata.BP = new("topGOdata", ontology = "BP", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.MF = new("topGOdata", ontology = "MF", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.CC = new("topGOdata", ontology = "CC", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
resultWeight01.BP = runTest(GOdata.BP, statistic = "fisher"),
resultWeight01.MF = runTest(GOdata.MF, statistic = "fisher"),
resultWeight01.CC = runTest(GOdata.CC, statistic = "fisher"),
allRes.BP1 = GenTable(GOdata.BP, weight01_pval=resultWeight01.BP, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.BP2 = cbind(allRes.BP1,"BP"),
allRes.BP = change_names(data = allRes.BP2, name_list = name_list),
allRes.MF1 = GenTable(GOdata.MF, weight01_pval=resultWeight01.MF, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.MF2 = cbind(allRes.MF1,"MF"),
allRes.MF = change_names(data = allRes.MF2, name_list = name_list),
allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.CC2 = cbind(allRes.CC1,"CC"),
allRes.CC = change_names(data = allRes.CC2, name_list = name_list),
#colnames(allRes.CC) = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
allRes1 = rbind(allRes.BP,allRes.MF),
allRes = rbind(allRes1, allRes.CC),
allGO.BP = genesInTerm(GOdata.BP),
allGO.MF = genesInTerm(GOdata.MF),
allGO.CC = genesInTerm(GOdata.CC),
allGO = c(allGO.BP, allGO.MF, allGO.CC),
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  deGenes]),
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", "),
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes),
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term, "Genes" = as.vector(enriched_go_with_my_genes.list), "adj_pval" = as.numeric(allRes$weight01_pval)),
EC.genelist = data.frame("ID" = rownames(resEdgeRtopTags$table), "logFC" = resEdgeRtopTags$table$logFC, "AveExpr" = rowMeans(dat.filtered[rownames(resEdgeRtopTags$table),]), "P.Value" = resEdgeRtopTags$table$PValue, "adj.P.Val" = resEdgeRtopTags$table$F),
circ = circle_dat(go.dataframe, EC.genelist)
#BP = topGoAnalysis("BP", fac_table, geneID2GO, 100),
#MF = topGoAnalysis("MF", fac_table, geneID2GO, 100),
#CC = topGoAnalysis("CC", fac_table, geneID2GO, 100),
#allRes1 = rbind(BP, MF),
#allRes2 = rbind(allRes1, CC),
#allRes_scientific = format(allRes2, scientific = TRUE),
#allRes_scientific_weight01_pval = allRes_scientific$weight01_pval,
#allRes1_weight01_pval = as.double(allRes_scientific_weight01_pval),
#allRes_sign = allRes1[allRes1$weight01_pval <= 0.05,]
)
make(plan)
dat.filtered <- read.table("/home/thomas/Documents/phd/scripts/enrichments/data/datFilteredCounts.txt")
both.go <- read.table("/home/thomas/Documents/phd/scripts/enrichments/data/both.blast2go.enrichments.txt"
, header = T, sep = "\t")
plan <- drake_plan(
name_list = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
table = geneNames %in% deGenes,
int_table = as.integer(table),
int_fac_table = factor(int_table),
fac_table = rename(table = int_fac_table, geneNames = geneNames),
GOdata.BP = new("topGOdata", ontology = "BP", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.MF = new("topGOdata", ontology = "MF", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.CC = new("topGOdata", ontology = "CC", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
resultWeight01.BP = runTest(GOdata.BP, statistic = "fisher"),
resultWeight01.MF = runTest(GOdata.MF, statistic = "fisher"),
resultWeight01.CC = runTest(GOdata.CC, statistic = "fisher"),
allRes.BP1 = GenTable(GOdata.BP, weight01_pval=resultWeight01.BP, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.BP2 = cbind(allRes.BP1,"BP"),
allRes.BP = change_names(data = allRes.BP2, name_list = name_list),
allRes.MF1 = GenTable(GOdata.MF, weight01_pval=resultWeight01.MF, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.MF2 = cbind(allRes.MF1,"MF"),
allRes.MF = change_names(data = allRes.MF2, name_list = name_list),
allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.CC2 = cbind(allRes.CC1,"CC"),
allRes.CC = change_names(data = allRes.CC2, name_list = name_list),
#colnames(allRes.CC) = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
allRes1 = rbind(allRes.BP,allRes.MF),
allRes = rbind(allRes1, allRes.CC),
allGO.BP = genesInTerm(GOdata.BP),
allGO.MF = genesInTerm(GOdata.MF),
allGO.CC = genesInTerm(GOdata.CC),
allGO = c(allGO.BP, allGO.MF, allGO.CC),
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  deGenes]),
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", "),
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes),
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term, "Genes" = as.vector(enriched_go_with_my_genes.list), "adj_pval" = as.numeric(allRes$weight01_pval)),
EC.genelist = data.frame("ID" = rownames(resEdgeRtopTags$table), "logFC" = resEdgeRtopTags$table$logFC, "AveExpr" = rowMeans(dat.filtered[rownames(resEdgeRtopTags$table),]), "P.Value" = resEdgeRtopTags$table$PValue, "adj.P.Val" = resEdgeRtopTags$table$F),
circ = circle_dat(go.dataframe, EC.genelist)
#BP = topGoAnalysis("BP", fac_table, geneID2GO, 100),
#MF = topGoAnalysis("MF", fac_table, geneID2GO, 100),
#CC = topGoAnalysis("CC", fac_table, geneID2GO, 100),
#allRes1 = rbind(BP, MF),
#allRes2 = rbind(allRes1, CC),
#allRes_scientific = format(allRes2, scientific = TRUE),
#allRes_scientific_weight01_pval = allRes_scientific$weight01_pval,
#allRes1_weight01_pval = as.double(allRes_scientific_weight01_pval),
#allRes_sign = allRes1[allRes1$weight01_pval <= 0.05,]
)
make(plan)
circ <- readd(circ)
reduced_circ <- reduce_overlap(circ, overlap = 0.9)
GOBubble(reduced_circ, labels = 2.8)
reduced_circ
reduced_circ$genes
GOBubble(circ, labels = 2.8)
circ
readd(allRes)
readd(allRes)$weight01_pval
resEdgeRtopTags$table
resEdgeRtopTags$table$F
head(readd(EC.genelist))
head(readd(go.dataframe))
head(readd(allRes))
head(readd(allRes)$weight01_pval)
as.numeric(head(readd(allRes)$weight01_pval))
head(readd(allRes)$weight01_pval)
plan <- drake_plan(
name_list = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
table = geneNames %in% deGenes,
int_table = as.integer(table),
int_fac_table = factor(int_table),
fac_table = rename(table = int_fac_table, geneNames = geneNames),
GOdata.BP = new("topGOdata", ontology = "BP", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.MF = new("topGOdata", ontology = "MF", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.CC = new("topGOdata", ontology = "CC", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
resultWeight01.BP = runTest(GOdata.BP, statistic = "fisher"),
resultWeight01.MF = runTest(GOdata.MF, statistic = "fisher"),
resultWeight01.CC = runTest(GOdata.CC, statistic = "fisher"),
allRes.BP1 = GenTable(GOdata.BP, weight01_pval=resultWeight01.BP, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.BP2 = cbind(allRes.BP1,"BP"),
allRes.BP = change_names(data = allRes.BP2, name_list = name_list),
allRes.MF1 = GenTable(GOdata.MF, weight01_pval=resultWeight01.MF, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.MF2 = cbind(allRes.MF1,"MF"),
allRes.MF = change_names(data = allRes.MF2, name_list = name_list),
allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.CC2 = cbind(allRes.CC1,"CC"),
allRes.CC = change_names(data = allRes.CC2, name_list = name_list),
#colnames(allRes.CC) = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
allRes1 = rbind(allRes.BP,allRes.MF),
allRes = rbind(allRes1, allRes.CC),
allGO.BP = genesInTerm(GOdata.BP),
allGO.MF = genesInTerm(GOdata.MF),
allGO.CC = genesInTerm(GOdata.CC),
allGO = c(allGO.BP, allGO.MF, allGO.CC),
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  deGenes]),
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", "),
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes),
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term, "Genes" = as.vector(enriched_go_with_my_genes.list), "adj_pval" = allRes$weight01_pval),
EC.genelist = data.frame("ID" = rownames(resEdgeRtopTags$table), "logFC" = resEdgeRtopTags$table$logFC, "AveExpr" = rowMeans(dat.filtered[rownames(resEdgeRtopTags$table),]), "P.Value" = resEdgeRtopTags$table$PValue, "adj.P.Val" = resEdgeRtopTags$table$F),
circ = circle_dat(go.dataframe, EC.genelist)
#BP = topGoAnalysis("BP", fac_table, geneID2GO, 100),
#MF = topGoAnalysis("MF", fac_table, geneID2GO, 100),
#CC = topGoAnalysis("CC", fac_table, geneID2GO, 100),
#allRes1 = rbind(BP, MF),
#allRes2 = rbind(allRes1, CC),
#allRes_scientific = format(allRes2, scientific = TRUE),
#allRes_scientific_weight01_pval = allRes_scientific$weight01_pval,
#allRes1_weight01_pval = as.double(allRes_scientific_weight01_pval),
#allRes_sign = allRes1[allRes1$weight01_pval <= 0.05,]
)
make(plan)
circ <- readd(circ)
circ$adj_pval
GOBubble(circ, labels = 2.8)
circ$logFC
readd(EC.genelist)
readd(go.dataframe)
go.dataframe <- readd(go.dataframe)
go.dataframe$adj_pval
circ = circle_dat(go.dataframe, EC.genelist)
EC.genelist <- readd(EC.genelist)
circ = circle_dat(go.dataframe, EC.genelist)
GOBubble(circ, labels = 2.8)
allRes$weight01_pval
allRes <- readd(allRes)
allRes$weight01_pval
as.numeric(allRes$weight01_pval)
as.integer(allRes$weight01_pval)
allGO <- readd(allGO)
allGO
format(allRes$weight01_pval, scientific = FALSE)
format(allRes$weight01_pval, scientific = T)
format(allRes$weight01_pval, scientific = T)
as.numeric(allRes$weight01_pval, scientific = T)
as.numeric(allRes$weight01_pval[4])
allRes$weight01_pval[4]
1.2
1,2
as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE))
plan <- drake_plan(
name_list = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
table = geneNames %in% deGenes,
int_table = as.integer(table),
int_fac_table = factor(int_table),
fac_table = rename(table = int_fac_table, geneNames = geneNames),
GOdata.BP = new("topGOdata", ontology = "BP", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.MF = new("topGOdata", ontology = "MF", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
GOdata.CC = new("topGOdata", ontology = "CC", allGenes = fac_table, annot = annFUN.gene2GO, gene2GO = geneID2GO),
resultWeight01.BP = runTest(GOdata.BP, statistic = "fisher"),
resultWeight01.MF = runTest(GOdata.MF, statistic = "fisher"),
resultWeight01.CC = runTest(GOdata.CC, statistic = "fisher"),
allRes.BP1 = GenTable(GOdata.BP, weight01_pval=resultWeight01.BP, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.BP2 = cbind(allRes.BP1,"BP"),
allRes.BP = change_names(data = allRes.BP2, name_list = name_list),
allRes.MF1 = GenTable(GOdata.MF, weight01_pval=resultWeight01.MF, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.MF2 = cbind(allRes.MF1,"MF"),
allRes.MF = change_names(data = allRes.MF2, name_list = name_list),
allRes.CC1 = GenTable(GOdata.CC, weight01_pval=resultWeight01.CC, orderBy = "weight01", ranksOf = "weight01",topNodes = 100),
allRes.CC2 = cbind(allRes.CC1,"CC"),
allRes.CC = change_names(data = allRes.CC2, name_list = name_list),
#colnames(allRes.CC) = c("GO.ID","Term","Annotated","Significant","Expected","weight01_pval", "branch"),
allRes1 = rbind(allRes.BP,allRes.MF),
allRes = rbind(allRes1, allRes.CC),
allGO.BP = genesInTerm(GOdata.BP),
allGO.MF = genesInTerm(GOdata.MF),
allGO.CC = genesInTerm(GOdata.CC),
allGO = c(allGO.BP, allGO.MF, allGO.CC),
SAM_ANOTATION = lapply(allGO,function(x) x[x %in%  deGenes]),
enriched_go_with_my_genes = lapply(SAM_ANOTATION[allRes[,1]], paste0, collapse = ", "),
enriched_go_with_my_genes.list = attach_enriched_go_genes(enriched_go_with_my_genes),
go.dataframe = data.frame("Category" = allRes$branch, "ID" = allRes$GO.ID, "Term" = allRes$Term, "Genes" = as.vector(enriched_go_with_my_genes.list), "adj_pval" = as.numeric(sub(",", ".", allRes$weight01_pval, fixed = TRUE))),
EC.genelist = data.frame("ID" = rownames(resEdgeRtopTags$table), "logFC" = resEdgeRtopTags$table$logFC, "AveExpr" = rowMeans(dat.filtered[rownames(resEdgeRtopTags$table),]), "P.Value" = resEdgeRtopTags$table$PValue, "adj.P.Val" = resEdgeRtopTags$table$F),
circ = circle_dat(go.dataframe, EC.genelist)
#BP = topGoAnalysis("BP", fac_table, geneID2GO, 100),
#MF = topGoAnalysis("MF", fac_table, geneID2GO, 100),
#CC = topGoAnalysis("CC", fac_table, geneID2GO, 100),
#allRes1 = rbind(BP, MF),
#allRes2 = rbind(allRes1, CC),
#allRes_scientific = format(allRes2, scientific = TRUE),
#allRes_scientific_weight01_pval = allRes_scientific$weight01_pval,
#allRes1_weight01_pval = as.double(allRes_scientific_weight01_pval),
#allRes_sign = allRes1[allRes1$weight01_pval <= 0.05,]
)
make(plan)
circ <- readd(circ)
GOBubble(circ, labels = 2.8)
GOBubble(circ, labels = 2.8)
GOBubble(circ, title = 'Bubble plot with background colour', display = 'multiple', bg.col = T, labels = 3)
GOBubble(circ, title = 'Bubble plot with background colour', display = 'multiple', bg.col = T, labels = 1.3)
GOBubble(subset(circ, category == 'BP'), title = 'Bubble plot with background colour', display = 'multiple', bg.col = T, labels = 1.3)
reduced_circ <- reduce_overlap(circ, overlap = 0.75)
GOBubble(subset(reduced_circ, category == 'BP'), title = 'Bubble plot with background colour', display = 'multiple', bg.col = T, labels = 1.3)
GOBar(subset(reduced_circ, category == 'BP'))
GOBar(subset(reduced_circ, category == 'BP'),  zsc.col = c("blue", "white", "red"))
reduced_circ
subset(reduced_circ, category == 'BP')
sub <- subset(reduced_circ, category == 'BP')
sub[order(sub$zscore)]
sub[order(sub$zscore),]
reduced_circ <- reduce_overlap(circ, overlap = 0.9)
GOBar(subset(reduced_circ, category == 'BP'),  zsc.col = c("blue", "white", "red"))
reduced_circ <- reduce_overlap(circ, overlap = 0.5)
GOBar(subset(reduced_circ, category == 'BP'),  zsc.col = c("blue", "white", "red"))
sub[order(sub$zscore),]
reduced_circ <- reduce_overlap(circ, overlap = 0.1)
GOBar(subset(reduced_circ, category == 'BP'),  zsc.col = c("blue", "white", "red"))
sub[order(sub$zscore),]
sub <- subset(reduced_circ, category == 'BP')
sub[order(sub$zscore),]
reduced_circ <- reduce_overlap(circ, overlap = 0.75)
sub <- subset(reduced_circ, category == 'BP')
sub[order(sub$zscore),]
dev.off()
reduced_circ <- reduce_overlap(circ, overlap = 0.75)
GOBar(subset(reduced_circ, category == 'BP'),  zsc.col = c("blue", "white", "red"))
sub <- subset(reduced_circ, category == 'BP')
sub[order(sub$zscore),]
GOBubble(reduced_circ, labels = 4.5, display = 'multiple', table.legend = T)
GOBubble(reduced_circ, labels = 1.3, display = 'multiple', table.legend = T)
GOBubble(sub, labels = 1.3, display = 'multiple', table.legend = T)
sub
sub[order(sub$zscore),]
sub[order(sub$zscore),"count"]
sub[order(sub$zscore),c("ID", "term", "count")]
sub[order(sub$zscore),c("ID", "term", "count", "zscore")]
write.table(file="bp.enrichments" ,sub[order(sub$zscore),c("ID", "term", "count", "zscore")])
reduced_circ <- reduce_overlap(circ.BP.CC.MF, overlap = 0.6)
GOBar(subset(reduced_circ, category == 'BP'),  zsc.col = c("blue", "white", "red"), )
reduced_circ <- reduce_overlap(circ, overlap = 0.6)
GOBar(subset(reduced_circ, category == 'BP'),  zsc.col = c("blue", "white", "red"), )
abline(h=1.3)
dev.off()
GOBar(subset(reduced_circ, category == 'BP'),  zsc.col = c("blue", "white", "red"), )
abline(h=1.3)
write.table(file="bp.enrichments" ,sub[-order(sub$zscore),c("ID", "term", "count", "zscore")])
write.table(file="bp.enrichments" ,sub[order(-sub$zscore),c("ID", "term", "count", "zscore")])
sub
sub[sub$count>=3]
sub[sub$count>=3,]
GOBar(sub[sub$count>=3,],  zsc.col = c("blue", "white", "red"), )
sub_3 <- sub[sub$count>=3,]
write.table(file="bp.enrichments" ,sub_3[order(-sub_3$zscore),c("ID", "term", "count", "zscore")])
write.table(file="bp.enrichments" ,sub_3[order(-sub_3$zscore),])
readd(allRes)
GO:0009753
go.dataframe <- readd(go.dataframe)
go.dataframe$ID
go.dataframe$Genes[go.dataframe$ID=="GO:0009753",]
go.dataframe$Genes[go.dataframe$ID=="GO:0009753"]
circ$genes[circ$ID=="GO:0009753"]
write.table(circ$genes[circ$ID=="GO:0009753"])
write.table(circ$genes[circ$ID=="GO:0009753"], quote = F, row.names = F)
write.table(circ$genes[circ$ID=="GO:0009753"], quote = F, row.names = F, col.names = F)
rite.table(circ$genes[circ$ID=="GO:0009753"], quote = F, row.names = F, col.names = F, file = "response_to_jas_genes.txt")
write.table(circ$genes[circ$ID=="GO:0009753"], quote = F, row.names = F, col.names = F, file = "response_to_jas_genes.txt")
write.table(circ$genes[circ$ID=="GO:0009753"], quote = F, row.names = F, col.names = F, file = "response_to_jas_genes.txt")
