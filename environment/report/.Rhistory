formula = paste0("as.formula(~ ", species, "+ ", normSetW, ")"),
#formul = as.formula("~species+normSetW-1"),
design = model.matrix(formula)
#design = model.matrix(~geoFac+normSet$W-1)
)
make(plan)
readd(formula)
plan <- drake_plan(strings_in_dots = "literals",
data.featureCounts = read.table("/data/phdData/orchis/counts/count.featureCounts.txt"),
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list),
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list),
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," "),
species = makeSpeciesVector(dat),
specFac = as.factor(species),
batchMatrix = makeBatchMatrix(data = dat),
#check filtering step
keep = rowSums(cpm(dat)>0.08) >= 10,
s = summary(keep),
dat.filtered = dat[keep,],
set = makeRUVset(dat = dat.filtered),
counts.set = rownames(counts(set)),
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix),
normSetW = normSet$W,
formula = paste("as.formula(~ ", species, "+ ", normSetW, ")"),
#formul = as.formula("~species+normSetW-1"),
design = model.matrix(formula)
#design = model.matrix(~geoFac+normSet$W-1)
)
make(plan)
readd(formula)
plan <- drake_plan(strings_in_dots = "literals",
data.featureCounts = read.table("/data/phdData/orchis/counts/count.featureCounts.txt"),
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list),
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list),
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," "),
species = makeSpeciesVector(dat),
specFac = as.factor(species),
batchMatrix = makeBatchMatrix(data = dat),
#check filtering step
keep = rowSums(cpm(dat)>0.08) >= 10,
s = summary(keep),
dat.filtered = dat[keep,],
set = makeRUVset(dat = dat.filtered),
counts.set = rownames(counts(set)),
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix),
normSetW = normSet$W,
formula = paste("as.formula(~ ", specFac, "+ ", normSet$W, ")"),
#formul = as.formula("~species+normSetW-1"),
design = model.matrix(formula)
#design = model.matrix(~geoFac+normSet$W-1)
)
make(plan)
readd(formula)
plan <- drake_plan(strings_in_dots = "literals",
data.featureCounts = read.table("/data/phdData/orchis/counts/count.featureCounts.txt"),
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list),
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list),
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," "),
species = makeSpeciesVector(dat),
specFac = as.factor(species),
batchMatrix = makeBatchMatrix(data = dat),
#check filtering step
keep = rowSums(cpm(dat)>0.08) >= 10,
s = summary(keep),
dat.filtered = dat[keep,],
set = makeRUVset(dat = dat.filtered),
counts.set = rownames(counts(set)),
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix),
normSetW = normSet$W,
formula = "as.formula(~ specFac + normSet$W, )",
#formul = as.formula("~species+normSetW-1"),
design = model.matrix(formula)
#design = model.matrix(~geoFac+normSet$W-1)
)
make(plan)
readd(formula)
plan <- drake_plan(strings_in_dots = "literals",
data.featureCounts = read.table("/data/phdData/orchis/counts/count.featureCounts.txt"),
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list),
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list),
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," "),
species = makeSpeciesVector(dat),
specFac = as.factor(species),
batchMatrix = makeBatchMatrix(data = dat),
#check filtering step
keep = rowSums(cpm(dat)>0.08) >= 10,
s = summary(keep),
dat.filtered = dat[keep,],
set = makeRUVset(dat = dat.filtered),
counts.set = rownames(counts(set)),
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix),
normSetW = normSet$W,
formula = "~ specFac + normSet$W",
#formul = as.formula("~species+normSetW-1"),
design = model.matrix(formula)
#design = model.matrix(~geoFac+normSet$W-1)
)
make(plan)
readd(formula)
plan <- drake_plan(strings_in_dots = "literals",
data.featureCounts = read.table("/data/phdData/orchis/counts/count.featureCounts.txt"),
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list),
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list),
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," "),
species = makeSpeciesVector(dat),
specFac = as.factor(species),
batchMatrix = makeBatchMatrix(data = dat),
#check filtering step
keep = rowSums(cpm(dat)>0.08) >= 10,
s = summary(keep),
dat.filtered = dat[keep,],
set = makeRUVset(dat = dat.filtered),
counts.set = rownames(counts(set)),
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix),
normSetW = normSet$W,
#formula = "~ specFac + normSet$W",
#formul = as.formula("~species+normSetW-1"),
design = model.matrix(~ specFac + normSet$W)
#design = model.matrix(~geoFac+normSet$W-1)
)
make(plan)
c(1,2,1,3,1,3)
as.factor(c(1,2,1,3,1,3))
g <- c(1,2,1,3,1,3)
as.factor(g)
diagnose(design)
readd(specFac)
plan <- drake_plan(strings_in_dots = "literals",
data.featureCounts = read.table("/data/phdData/orchis/counts/count.featureCounts.txt"),
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list),
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list),
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," "),
species = makeSpeciesVector(dat),
specFac = as.factor(species),
batchMatrix = makeBatchMatrix(data = dat),
#check filtering step
keep = rowSums(cpm(dat)>0.08) >= 10,
s = summary(keep),
dat.filtered = dat[keep,],
set = makeRUVset(dat = dat.filtered),
counts.set = rownames(counts(set)),
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix),
normSetW = normSet$W,
#formula = "~ specFac + normSet$W",
#formul = as.formula("~species+normSetW-1"),
design = model.matrix(formula(~ specFac + normSet$W))
#design = model.matrix(~geoFac+normSet$W-1)
)
make(plan)
plan <- drake_plan(strings_in_dots = "literals",
data.featureCounts = read.table("/data/phdData/orchis/counts/count.featureCounts.txt"),
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list),
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list),
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," "),
species = makeSpeciesVector(dat),
specFac = as.factor(species),
batchMatrix = makeBatchMatrix(data = dat),
#check filtering step
keep = rowSums(cpm(dat)>0.08) >= 10,
s = summary(keep),
dat.filtered = dat[keep,],
set = makeRUVset(dat = dat.filtered),
counts.set = rownames(counts(set)),
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix),
normSetW = normSet$W,
#formula = "~ specFac + normSet$W",
#formul = as.formula("~species+normSetW-1"),
design = model.matrix(formula(~ .specFac. + normSet$W))
#design = model.matrix(~geoFac+normSet$W-1)
)
make(plan)
plan <- drake_plan(strings_in_dots = "literals",
data.featureCounts = read.table("/data/phdData/orchis/counts/count.featureCounts.txt"),
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list),
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list),
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," "),
species = makeSpeciesVector(dat),
specFac = as.factor(species),
batchMatrix = makeBatchMatrix(data = dat),
#check filtering step
keep = rowSums(cpm(dat)>0.08) >= 10,
s = summary(keep),
dat.filtered = dat[keep,],
set = makeRUVset(dat = dat.filtered),
counts.set = rownames(counts(set)),
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix),
normSetW = normSet$W,
#formula = "~ specFac + normSet$W",
#formul = as.formula("~species+normSetW-1"),
design = model.matrix(formula(~ specFac__ + normSet$W))
#design = model.matrix(~geoFac+normSet$W-1)
)
make(plan)
plan <- drake_plan(strings_in_dots = "literals",
data.featureCounts = read.table("/data/phdData/orchis/counts/count.featureCounts.txt"),
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list),
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list),
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," "),
species = makeSpeciesVector(dat),
specFac = as.factor(species),
batchMatrix = makeBatchMatrix(data = dat),
#check filtering step
keep = rowSums(cpm(dat)>0.08) >= 10,
s = summary(keep),
dat.filtered = dat[keep,],
set = makeRUVset(dat = dat.filtered),
counts.set = rownames(counts(set)),
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix),
normSetW = normSet$W,
#formula = "~ specFac + normSet$W",
#formul = as.formula("~species+normSetW-1"),
design = model.matrix(formula(~ specFac + normSet$W))
#design = model.matrix(~geoFac+normSet$W-1)
)
make(plan)
source("DEcleanfunctions.R")
plan <- drake_plan(strings_in_dots = "literals",
data.featureCounts = read.table("/data/phdData/orchis/counts/count.featureCounts.txt"),
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list),
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list),
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," "),
species = makeSpeciesVector(dat),
#specFac = as.factor(species),
batchMatrix = makeBatchMatrix(data = dat),
#check filtering step
keep = rowSums(cpm(dat)>0.08) >= 10,
s = summary(keep),
dat.filtered = dat[keep,],
set = makeRUVset(dat = dat.filtered),
counts.set = rownames(counts(set)),
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix),
normSetW = normSet$W,
#formula = "~ specFac + normSet$W",
#formul = as.formula("~species+normSetW-1"),
design = model.matrix(formula(~ specFac + normSet$W))
#design = model.matrix(~geoFac+normSet$W-1)
)
make(plan)
plan <- drake_plan(strings_in_dots = "literals",
data.featureCounts = read.table("/data/phdData/orchis/counts/count.featureCounts.txt"),
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list),
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list),
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," "),
species = makeSpeciesVector(dat),
specFac = as.factor(species),
batchMatrix = makeBatchMatrix(data = dat),
#check filtering step
keep = rowSums(cpm(dat)>0.08) >= 10,
s = summary(keep),
dat.filtered = dat[keep,],
set = makeRUVset(dat = dat.filtered),
counts.set = rownames(counts(set)),
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix),
normSetW = normSet$W,
#formula = "~ specFac + normSet$W",
#formul = as.formula("~species+normSetW-1"),
#design = model.matrix(formula(~ specFac + normSet$W))
#design = model.matrix(~geoFac+normSet$W-1)
)
make(plan)
plan <- drake_plan(strings_in_dots = "literals",
data.featureCounts = read.table("/data/phdData/orchis/counts/count.featureCounts.txt"),
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list),
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list),
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," "),
species = makeSpeciesVector(dat),
specFac = as.factor(species),
batchMatrix = makeBatchMatrix(data = dat),
#check filtering step
keep = rowSums(cpm(dat)>0.08) >= 10,
s = summary(keep),
dat.filtered = dat[keep,],
set = makeRUVset(dat = dat.filtered),
counts.set = rownames(counts(set)),
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix),
normSetW = normSet$W
#formula = "~ specFac + normSet$W",
#formul = as.formula("~species+normSetW-1"),
#design = model.matrix(formula(~ specFac + normSet$W))
#design = model.matrix(~geoFac+normSet$W-1)
)
make(plan)
source("DEcleanfunctions.R")
plan <- drake_plan(strings_in_dots = "literals",
data.featureCounts = read.table("/data/phdData/orchis/counts/count.featureCounts.txt"),
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list),
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list),
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," "),
species = makeSpeciesVector(dat),
specFac = as.factor(species),
batchMatrix = makeBatchMatrix(data = dat),
#check filtering step
keep = rowSums(cpm(dat)>0.08) >= 10,
s = summary(keep),
dat.filtered = dat[keep,],
set = makeRUVset(dat = dat.filtered),
counts.set = rownames(counts(set)),
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix),
normSetW = normSet$W
#formula = "~ specFac + normSet$W",
#formul = as.formula("~species+normSetW-1"),
#design = model.matrix(formula(~ specFac + normSet$W))
#design = model.matrix(~geoFac+normSet$W-1)
)
make(plan)
readd(specFac)
model.matrix(formula(~ readd(specFac) + readd(normSet$W)))
sF <- readd(specFac)
nS <- readd(normSet$W)
nS <- readd(normSet)
model.matrix(formula(~ sF + nS$W))
deps(model.matrix())
deps(model.matrix
)
deps_target(model.matrix)
deps_code(model.matrix)
install.packages(here)
install.packages("here")
library("gplots")
library("tidyverse")
library("broom")
library("here")
library("data.table")
library("RUVSeq")
library("edgeR")
library("RColorBrewer")
library("adegenet")
library("statmod")
library("cgwtools")
library("drake")
pkgconfig::set_config("drake::strings_in_dots" = "literals")
fs::link_create(here("..", "data", "count.featureCounts.txt"), "count.featureCounts.txt")
file.exists(here("..", "src", "functions.R"))
file.exists("report.Rmd")
getwd()
setwd("/home/botanik/Documents/phd/scripts/Rscripts/differential-expression/report/")
fs::link_create(here("..", "data", "count.featureCounts.txt"), "count.featureCounts.txt")
file.exists(here("..", "src", "functions.R"))
file.exists("report.Rmd")
source(here("..", "src", "functions.R"))
file.exists(here("..", "src", "functions.R"))
install.packages("tidyverse")
library("tidyverse")
file.exists(here("..", "src", "functions.R"))
?here
file.exists(here(path = "..", "src", "functions.R"))
library("here")
file.exists(here(path = "..", "src", "functions.R"))
source(here("..", "/src", "functions.R"))
source(here("..", "src", "functions.R"))
library("gplots")
library("tidyverse")
library("broom")
library("here")
library("data.table")
library("RUVSeq")
library("edgeR")
library("RColorBrewer")
library("adegenet")
library("statmod")
library("cgwtools")
library("drake")
pkgconfig::set_config("drake::strings_in_dots" = "literals")
version
################ TOPGO ####################################################
library("topGO")
#library(ALL)
library("xtable")
library("drake")
pkgconfig::set_config("drake::strings_in_dots" = "literals")
normSet <- readRDS("/home/thomas/Documents/phd/scripts/enrichments/data/normSet.rds")
### FULL SET OF NON FILTERED TRANSCRIPTS ##########################################
geneID2GO <- readMappings(file = "/data/phdData/orchis/Orchis.transcriptome.go.annotation.topGO.map")
### REDUCED SET OF FILTERED TRANSCRIPTS ##########################################
geneID2GO <- readMappings(file = "/data/phdData/orchis/counts/de.featureCounts/retained.after.filtering.go.map.txt")
geneID2GO <- readMappings(file = "/data/phdData/orchis/counts/de.featureCounts/retained.genes.justGO.trinotate.txt")
deGenes <- read.table("/data/phdData/orchis/counts/de.featureCounts/both.transcripts.de.txt")
deGenes <- as.vector(deGenes$V1)
### ON THE RUN ANALYSIS
deGenes <- FDRres[FDRres$FDR <= 0.05,]
env_gen_analysis<-readRDS("/home/botanik/Documents/phd/research/environmental_study/deEnviroCorrelations/2018/env_gen_analysis.RDS")
env_gen_analysis<-readRDS("/home/thomas/Documents/phd/research/deEnviroCorrelations/2018/env_gen_analysis.RDS")
env_gen_analysis
env_gen_analysis$bio4
finalenvmatrixrep <- readRDS("/home/thomas/Documents/phd/research/deEnviroCorrelations/2018/finalenvmatrixrep.RDS")
finalenvmatrixrep
macro <- readRDS("/home/thomas/Documents/phd/research/deEnviroCorrelations/2018/macro/DactpolyGeoanalysis_nosoilnovcf.RData")
load("/home/thomas/Documents/phd/research/deEnviroCorrelations/2018/macro/DactpolyGeoanalysis_nosoilnovcf.RData")
install.packages("dismo")
install.packages("rgdal")
library("rgdal")
library("rgdal")
install.packages("raster")
install.packages("gtools")
install.packages("sp")
install.packages("maps")
install.packages("rgeos")
install.packages("ade4")
read.table("/home/thomas/Documents/phd/research/deEnviroCorrelations/2018/macro/pops_bioclim.txt")
macro <- read.table("/home/thomas/Documents/phd/research/deEnviroCorrelations/2018/macro/pops_bioclim.txt")
ls
head(macro)
macro$vcf
macro$Population
c <- c(rep(4, "tra"), rep(10,"maj"), rep(13, "tra"))
c <- c(rep("tra",4), rep(10,"maj"), rep(13, "tra"))
rep("tra",4)
c <- c(rep("tra",4), rep("maj",10), rep("tra", 13))
macro <- data.frame(macro, "species" = c)
macro$species
boxplot(bio_17~species,
data=macro,
main = "Relative chlorophyll",
#at = c(1,2,4,5,7,8),
pch = 19,
las = 1,
cex = 0.3,
#names = c("maj alps", "tra alps", "maj pyr", "tra bri", "maj scan", "tra scan"),
col = c("red","blue"),
border = "black"
)
boxplot(CHELSA_bio_17~species,
data=macro,
main = "Relative chlorophyll",
#at = c(1,2,4,5,7,8),
pch = 19,
las = 1,
cex = 0.3,
#names = c("maj alps", "tra alps", "maj pyr", "tra bri", "maj scan", "tra scan"),
col = c("red","blue"),
border = "black"
)
boxplot(CHELSA_bio_15~species,
data=macro,
main = "Relative chlorophyll",
#at = c(1,2,4,5,7,8),
pch = 19,
las = 1,
cex = 0.3,
#names = c("maj alps", "tra alps", "maj pyr", "tra bri", "maj scan", "tra scan"),
col = c("red","blue"),
border = "black"
)
boxplot(vcf~species,
data=macro,
main = "Relative chlorophyll",
#at = c(1,2,4,5,7,8),
pch = 19,
las = 1,
cex = 0.3,
#names = c("maj alps", "tra alps", "maj pyr", "tra bri", "maj scan", "tra scan"),
col = c("red","blue"),
border = "black"
)
colnames(macro)
colnames(macro)[3:length(colnames(macro))-1]
f <- colnames(macro)[3:length(colnames(macro))-1]
# --------------- Images for photosynthesis ----------------
for (i in f){
namei <- i
#mainDir <- "/home/thomas/Documents/prog/R/photosynthesis/" # Make the directory
#subDir <- i
#dir.create(file.path(mainDir, subDir))
#setwd(file.path(mainDir, subDir))
#svg(filename=paste(i, "-greenhouse", ".svg", sep = ""), width=5, height=4, pointsize=12)
boxplot(get(i)~species,
data=macro,
main = paste(i, "(field)", sep = ""),
#at = c(1,2,4,5,7,8),
pch = 19,
cex = 0.3,
#names = c("maj alps", "tra alps", "maj pyr", "tra bri", "maj scan", "tra scan"),
las = 1,
col = c("red","blue"),
border = "black"
)
#plot(reduced_Data[[i]], normSet$normalizedCounts[j,], main=j, xlab = i, ylab = "normalized counts", col = specieColors)
#text(reduced_Data[[i]], normSet$normalizedCounts[j,], labels = reduced_Data$Population, cex = 0.3)
#dev.off()
}
f
f <- c("Ambient_Humidity", "Ambient_Temperature", "Leaf_Angle", "Leaf.Temp.Differential", "LEF", "PAR", "NPQt", "Phi2", "PhiNO", "PhiNPQ", "Relative_Chlorophyll")
f
f <- c("Ambient_Humidity", "Ambient_Temperature", "Leaf_Angle", "Leaf.Temp.Differential", "LEF", "PAR", "NPQt", "Phi2", "PhiNO", "PhiNPQ", "Relative_Chlorophyll")
f <- colnames(macro)[3:length(colnames(macro))-1]
f
colnames(macro)
f <- colnames(macro)[4:length(colnames(macro))-1]
f
# --------------- Images for photosynthesis ----------------
for (i in f){
namei <- i
#mainDir <- "/home/thomas/Documents/prog/R/photosynthesis/" # Make the directory
#subDir <- i
#dir.create(file.path(mainDir, subDir))
#setwd(file.path(mainDir, subDir))
#svg(filename=paste(i, "-greenhouse", ".svg", sep = ""), width=5, height=4, pointsize=12)
boxplot(get(i)~species,
data=macro,
main = paste(i, "(field)", sep = ""),
#at = c(1,2,4,5,7,8),
pch = 19,
cex = 0.3,
#names = c("maj alps", "tra alps", "maj pyr", "tra bri", "maj scan", "tra scan"),
las = 1,
col = c("red","blue"),
border = "black"
)
#plot(reduced_Data[[i]], normSet$normalizedCounts[j,], main=j, xlab = i, ylab = "normalized counts", col = specieColors)
#text(reduced_Data[[i]], normSet$normalizedCounts[j,], labels = reduced_Data$Population, cex = 0.3)
#dev.off()
}
