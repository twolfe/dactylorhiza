?here
file.exists(here(path = "..", "src", "functions.R"))
library("here")
file.exists(here(path = "..", "src", "functions.R"))
source(here("..", "/src", "functions.R"))
source(here("..", "src", "functions.R"))
library("gplots")
library("tidyverse")
library("broom")
library("here")
library("data.table")
library("RUVSeq")
library("edgeR")
library("RColorBrewer")
library("adegenet")
library("statmod")
library("cgwtools")
library("drake")
pkgconfig::set_config("drake::strings_in_dots" = "literals")
version
library("gplots")
library("tidyverse")
library("broom")
library("here")
library("data.table")
library("RUVSeq")
library("edgeR")
library("statmod")
library("RColorBrewer")
library("drake")
pkgconfig::set_config("drake::strings_in_dots" = "literals")
file.exists(here(path = "..", "src", "functions.R"))
file.exists("report.Rmd")
source(here(path = "..", "src", "functions.R"))
plan <- drake_plan(
name_list = c("tB1830_1","tB1830_2","tB1833_1","tB1833_2",
"fB1804","fB1855","fP1001","fP1707_1","fP1707_2",
"iA1586","iB1176","iB1870","iS1904","iS1908",
"mA1567_1","mA1567_2","mA1568","mA1573","mA1661","mA1775","mP1722_1","mP1722_2","mP1744","mP1748_1","mP1748_2","mS1757","mS1765_1","mS1765_2",
"tA1553","tA1641","tA1670","tB1798_1","tB1798_2","tB1805_1","tB1805_2","tB1812_1","tB1812_2","tS1901","tS1902","tS1920_1","tS1920_2"),
remove_list = c("mA1567_1", "mA1567_2", "mP1748_1", "mP1748_2"),
data.featureCounts = read.table("count.featureCounts.txt"),
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list),
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list),
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," "),
species = makeSpeciesVector(dat),
specFac = as.factor(species),
batchMatrix = makeBatchMatrix(data = dat),
#check filtering step
keep = rowSums(cpm(dat)>0.08) >= 10,
s = summary(keep),
dat.filtered = dat[keep,],
set = makeRUVset(dat = dat.filtered),
counts.set = rownames(counts(set)),
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix),
des = data.frame(specFac, normSet$W),
#formula = "~ specFac + normSet$W",
#formul = as.formula("~species+normSetW-1"),
design = model.matrix(~specFac + W_1 + W_2 + W_3 - 1, data = des),
#design = model.matrix(~geoFac+normSet$W-1)
des.names = c("majalis", "traunsteineri", "nW1", "nW2", "nW3"),
design.names = change_names(data = design, name_list = des.names),
y0 = DGEList(counts = counts(set), group = specFac), # my stuff: counts(set), group = group) # Don't forget, model is taking into account the RUV normalised matrix of counts
#get an idea of how to filter
#cpm = cpm(5, mean(y0$samples$lib.size)),
y1 = calcNormFactors(y0),
y2 = estimateDisp(y1, design = design, robust = T),
pBCV = plotBCV(y2),
fit = glmQLFit(y2, design, robust = T),
hist = hist(fit$coefficients[,1], breaks = 100),
sFit = summary(fit$df.prior),
pQLDisp = plotQLDisp(fit),
con = c(-1,1,0,0,0), #Where the contrasts are chosen
resEdge = glmQLFTest(fit, contrast = con),
de = decideTestsDGE(resEdge, adjust.method="fdr", p.value = 0.05),
is.de = decideTestsDGE(resEdge),
pMD = plotMD(resEdge, status=is.de, values=c(1,0,-1), col=c("blue","black", "red"), legend="topright", pch=19, cex=c(0.5,0.1)),
resEdgeRtopTags = topTags(resEdge, n=nrow(set)),
FDRres = topTags(resEdgeRtopTags, n=nrow(dat))$table
#con <- makeContrasts(traunsteineri - majalis, levels = design)
)
make(plan)
resEdge <- readd(resEdge)
resEdge
go <- goana(resEdge, species="Mm")
go <- goana(resEdge)
BiocManager::install("org.At.eg.db", version = "3.8")
install.packages("BiocManager")
BiocManager::install("org.At.eg.db", version = "3.8")
BiocManager::install("org.Mn.eg.db", version = "3.8")
BiocManager::install("org.Mn.eg.db")
library("BiocInstaller", lib.loc="~/anaconda3/lib/R/library")
BiocManager::install("org.At.eg.db", version = "3.8")
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
BiocManager::install("org.At.eg.db", version = "3.8")
BiocManager::install("org.At.eg.db")
myrepos=biocinstallRepos()
install.packages("org.Hs.eg.db",repos=myrepos)
install.packages("org.At.eg.db",repos=myrepos)
install.packages("org.At.tair.db",repos=myrepos)
go <- goana(qlf, species="At")
go <- goana(qlf, species="At.tair")
go <- goana(qlf, species="Hs")
go <- goana(resEdge, species="At.tair")
go <- goana(resEdge, species="At")
install.packages("org.Mm.db",repos=myrepos)
require(org.At.tair.eg.db)
require(org.Hs.eg.db)
require(org.At.eg.db)
require(org.At.tair.eg.db)
require(org.Atair.eg.db)
go <- goana(qlf, species="Hs")
go <- goana(resEdge, species="Hs")
library("gplots")
library("tidyverse")
library("broom")
library("here")
library("data.table")
library("RUVSeq")
library("edgeR")
library("statmod")
library("RColorBrewer")
library("drake")
pkgconfig::set_config("drake::strings_in_dots" = "literals")
file.exists(here(path = "..", "src", "functions.R"))
file.exists("report.Rmd")
plan <- drake_plan(
name_list = c("tB1830_1","tB1830_2","tB1833_1","tB1833_2",
"fB1804","fB1855","fP1001","fP1707_1","fP1707_2",
"iA1586","iB1176","iB1870","iS1904","iS1908",
"mA1567_1","mA1567_2","mA1568","mA1573","mA1661","mA1775","mP1722_1","mP1722_2","mP1744","mP1748_1","mP1748_2","mS1757","mS1765_1","mS1765_2",
"tA1553","tA1641","tA1670","tB1798_1","tB1798_2","tB1805_1","tB1805_2","tB1812_1","tB1812_2","tS1901","tS1902","tS1920_1","tS1920_2"),
remove_list = c("mA1567_1", "mA1567_2", "mP1748_1", "mP1748_2"),
data.featureCounts = read.table("count.featureCounts.txt"),
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list),
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list),
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," "),
species = makeSpeciesVector(dat),
specFac = as.factor(species),
batchMatrix = makeBatchMatrix(data = dat),
#check filtering step
keep = rowSums(cpm(dat)>0.08) >= 10,
s = summary(keep),
dat.filtered = dat[keep,],
set = makeRUVset(dat = dat.filtered),
counts.set = rownames(counts(set)),
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix),
des = data.frame(specFac, normSet$W),
#formula = "~ specFac + normSet$W",
#formul = as.formula("~species+normSetW-1"),
design = model.matrix(~specFac + W_1 + W_2 + W_3 - 1, data = des),
#design = model.matrix(~geoFac+normSet$W-1)
des.names = c("majalis", "traunsteineri", "nW1", "nW2", "nW3"),
design.names = change_names(data = design, name_list = des.names),
y0 = DGEList(counts = counts(set), group = specFac), # my stuff: counts(set), group = group) # Don't forget, model is taking into account the RUV normalised matrix of counts
#get an idea of how to filter
#cpm = cpm(5, mean(y0$samples$lib.size)),
y1 = calcNormFactors(y0),
y2 = estimateDisp(y1, design = design, robust = T),
pBCV = plotBCV(y2),
fit = glmQLFit(y2, design, robust = T),
hist = hist(fit$coefficients[,1], breaks = 100),
sFit = summary(fit$df.prior),
pQLDisp = plotQLDisp(fit),
con = c(-1,1,0,0,0), #Where the contrasts are chosen
resEdge = glmQLFTest(fit, contrast = con),
de = decideTestsDGE(resEdge, adjust.method="fdr", p.value = 0.05),
is.de = decideTestsDGE(resEdge),
pMD = plotMD(resEdge, status=is.de, values=c(1,0,-1), col=c("blue","black", "red"), legend="topright", pch=19, cex=c(0.5,0.1)),
resEdgeRtopTags = topTags(resEdge, n=nrow(set)),
FDRres = topTags(resEdgeRtopTags, n=nrow(dat))$table
#con <- makeContrasts(traunsteineri - majalis, levels = design)
)
make(plan)
source(here(path = "..", "src", "functions.R"))
# Your custom code is a bunch of functions.
## -------------------------
source("/home/thomas/Documents/phd/scripts/differential-expression/src/functions.R"))
# Your custom code is a bunch of functions.
## -------------------------
source("/home/thomas/Documents/phd/scripts/differential-expression/src/functions.R")
plan <- drake_plan(
name_list = c("tB1830_1","tB1830_2","tB1833_1","tB1833_2",
"fB1804","fB1855","fP1001","fP1707_1","fP1707_2",
"iA1586","iB1176","iB1870","iS1904","iS1908",
"mA1567_1","mA1567_2","mA1568","mA1573","mA1661","mA1775","mP1722_1","mP1722_2","mP1744","mP1748_1","mP1748_2","mS1757","mS1765_1","mS1765_2",
"tA1553","tA1641","tA1670","tB1798_1","tB1798_2","tB1805_1","tB1805_2","tB1812_1","tB1812_2","tS1901","tS1902","tS1920_1","tS1920_2"),
remove_list = c("mA1567_1", "mA1567_2", "mP1748_1", "mP1748_2"),
data.featureCounts = read.table("count.featureCounts.txt"),
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list),
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list),
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," "),
species = makeSpeciesVector(dat),
specFac = as.factor(species),
batchMatrix = makeBatchMatrix(data = dat),
#check filtering step
keep = rowSums(cpm(dat)>0.08) >= 10,
s = summary(keep),
dat.filtered = dat[keep,],
set = makeRUVset(dat = dat.filtered),
counts.set = rownames(counts(set)),
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix),
des = data.frame(specFac, normSet$W),
#formula = "~ specFac + normSet$W",
#formul = as.formula("~species+normSetW-1"),
design = model.matrix(~specFac + W_1 + W_2 + W_3 - 1, data = des),
#design = model.matrix(~geoFac+normSet$W-1)
des.names = c("majalis", "traunsteineri", "nW1", "nW2", "nW3"),
design.names = change_names(data = design, name_list = des.names),
y0 = DGEList(counts = counts(set), group = specFac), # my stuff: counts(set), group = group) # Don't forget, model is taking into account the RUV normalised matrix of counts
#get an idea of how to filter
#cpm = cpm(5, mean(y0$samples$lib.size)),
y1 = calcNormFactors(y0),
y2 = estimateDisp(y1, design = design, robust = T),
pBCV = plotBCV(y2),
fit = glmQLFit(y2, design, robust = T),
hist = hist(fit$coefficients[,1], breaks = 100),
sFit = summary(fit$df.prior),
pQLDisp = plotQLDisp(fit),
con = c(-1,1,0,0,0), #Where the contrasts are chosen
resEdge = glmQLFTest(fit, contrast = con),
de = decideTestsDGE(resEdge, adjust.method="fdr", p.value = 0.05),
is.de = decideTestsDGE(resEdge),
pMD = plotMD(resEdge, status=is.de, values=c(1,0,-1), col=c("blue","black", "red"), legend="topright", pch=19, cex=c(0.5,0.1)),
resEdgeRtopTags = topTags(resEdge, n=nrow(set)),
FDRres = topTags(resEdgeRtopTags, n=nrow(dat))$table
#con <- makeContrasts(traunsteineri - majalis, levels = design)
)
make(plan)
normSet <- readd(normSet)
normSet$normalizedCounts
library(plotly)
install.packages("plotly")
library("plotly")
x <- c(1:100)
random_y <- rnorm(100, mean = 0)
data <- data.frame(x, random_y)
p <- plot_ly(data, x = ~x, y = ~random_y, type = 'scatter', mode = 'lines')
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="line-basic")
chart_link
p
trace_0 <- rnorm(100, mean = 5)
trace_1 <- rnorm(100, mean = 0)
trace_2 <- rnorm(100, mean = -5)
x <- c(1:100)
data <- data.frame(x, trace_0, trace_1, trace_2)
p <- plot_ly(data, x = ~x, y = ~trace_0, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~trace_1, name = 'trace 1', mode = 'lines+markers') %>%
add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers')
p
plot_ly(normSet$normalizedCounts)
is.data.frame(normSet$normalizedCounts)
head(as.data.frame(normSet$normalizedCounts))
plot_ly(as.data.frame(normSet$normalizedCounts))
plot_ly(log(as.data.frame(normSet$normalizedCounts)))
trace_0 <- rnorm(100, mean = 5)
trace_1 <- rnorm(100, mean = 0)
trace_2 <- rnorm(100, mean = -5)
x <- c(1:100)
data <- data.frame(x, trace_0, trace_1, trace_2)
data
head(as.data.frame(normSet$normalizedCounts))
plot_ly(as.data.frame(normSet$normalizedCounts),  x = ~tB1805_2, y = ~tS1920_2, name = 'trace 0', type = 'scatter', mode = 'lines')
plot_ly(log(as.data.frame(normSet$normalizedCounts)),  x = ~tB1805_2, y = ~tS1920_2, name = 'trace 0', type = 'scatter', mode = 'lines')
plot_ly(log(as.data.frame(normSet$normalizedCounts)),  x = ~tB1805_2, y = ~tS1920_2, name = 'trace 0', type = 'scatter', mode = 'markers')
plot_ly(log(as.data.frame(normSet$normalizedCounts)),  x = ~tB1805_2, y = ~mA1775, name = 'trace 0', type = 'scatter', mode = 'markers')
plot_ly(log(as.data.frame(normSet$normalizedCounts)),  x = ~tB1805_2, y = ~mA1775, name = 'trace 0', type = 'scatter', mode = 'markers')
plot_ly(log(as.data.frame(normSet$normalizedCounts)),  x = ~tB1805_2, y = ~tB1805_1, name = 'trace 0', type = 'scatter', mode = 'markers')
library("gplots")
library("tidyverse")
library("broom")
library("here")
library("data.table")
library("RUVSeq")
library("edgeR")
library("statmod")
library("RColorBrewer")
library("drake")
file.exists(here(path = "..", "src", "functions.R"))
file.exists("report.Rmd")
source(here(path = "..", "src", "functions.R"))
# Your custom code is a bunch of functions.
## -------------------------
source("/home/thomas/Documents/phd/de/featureCounts/dactylorhiza/differential-expression/src/functions.R")
plan <- drake_plan(
name_list = c("tB1830_1","tB1830_2","tB1833_1","tB1833_2",
"fB1804","fB1855","fP1001","fP1707_1","fP1707_2",
"iA1586","iB1176","iB1870","iS1904","iS1908",
"mA1567_1","mA1567_2","mA1568","mA1573","mA1661","mA1775","mP1722_1","mP1722_2","mP1744","mP1748_1","mP1748_2","mS1757","mS1765_1","mS1765_2",
"tA1553","tA1641","tA1670","tB1798_1","tB1798_2","tB1805_1","tB1805_2","tB1812_1","tB1812_2","tS1901","tS1902","tS1920_1","tS1920_2"),
remove_list = c("mA1567_1", "mA1567_2", "mP1748_1", "mP1748_2"),
data.featureCounts = read.table("count.featureCounts.txt"),
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list),
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list),
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," "),
species = makeSpeciesVector(dat),
specFac = as.factor(species),
batchMatrix = makeBatchMatrix(data = dat),
#check filtering step
keep = rowSums(cpm(dat)>0.08) >= 10,
s = summary(keep),
dat.filtered = dat[keep,],
set = makeRUVset(dat = dat.filtered),
counts.set = rownames(counts(set)),
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix),
des = data.frame(specFac, normSet$W),
#formula = "~ specFac + normSet$W",
#formul = as.formula("~species+normSetW-1"),
design = model.matrix(~specFac + W_1 + W_2 + W_3 - 1, data = des),
#design = model.matrix(~geoFac+normSet$W-1)
des.names = c("majalis", "traunsteineri", "nW1", "nW2", "nW3"),
design.names = change_names(data = design, name_list = des.names),
y0 = DGEList(counts = counts(set), group = specFac), # my stuff: counts(set), group = group) # Don't forget, model is taking into account the RUV normalised matrix of counts
#get an idea of how to filter
#cpm = cpm(5, mean(y0$samples$lib.size)),
y1 = calcNormFactors(y0),
y2 = estimateDisp(y1, design = design, robust = T),
pBCV = plotBCV(y2),
fit = glmQLFit(y2, design, robust = T),
hist = hist(fit$coefficients[,1], breaks = 100),
sFit = summary(fit$df.prior),
pQLDisp = plotQLDisp(fit),
con = c(-1,1,0,0,0), #Where the contrasts are chosen
resEdge = glmQLFTest(fit, contrast = con),
de = decideTestsDGE(resEdge, adjust.method="fdr", p.value = 0.05),
is.de = decideTestsDGE(resEdge),
pMD = plotMD(resEdge, status=is.de, values=c(1,0,-1), col=c("blue","black", "red"), legend="topright", pch=19, cex=c(0.5,0.1)),
resEdgeRtopTags = topTags(resEdge, n=nrow(set)),
FDRres = topTags(resEdgeRtopTags, n=nrow(dat))$table
#con <- makeContrasts(traunsteineri - majalis, levels = design)
)
data.featureCounts = read.table("/home/thomas/Documents/phd/de/52KPS/counts52KPS.txt")
rownames(data.featureCounts)
colames(data.featureCounts)
colnames(data.featureCounts)
plan <- drake_plan(
name_list = c("tB1830_1","tB1830_2","tB1833_1","tB1833_2",
"fB1804","fB1855","fP1001","fP1707_1","fP1707_2",
"iA1586","iB1176","iB1870","iS1904","iS1908",
"mA1567_1","mA1567_2","mA1568","mA1573","mA1661","mA1775","mP1722_1","mP1722_2","mP1744","mP1748_1","mP1748_2","mS1757","mS1765_1","mS1765_2",
"tA1553","tA1641","tA1670","tB1798_1","tB1798_2","tB1805_1","tB1805_2","tB1812_1","tB1812_2","tS1901","tS1902","tS1920_1","tS1920_2"),
remove_list = c("mA1567_1", "mA1567_2", "mP1748_1", "mP1748_2"),
data.featureCounts = read.table("/home/thomas/Documents/phd/de/52KPS/counts52KPS.txt", header = T),
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list),
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list),
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," "),
species = makeSpeciesVector(dat),
specFac = as.factor(species),
batchMatrix = makeBatchMatrix(data = dat),
#check filtering step
keep = rowSums(cpm(dat)>0.08) >= 10,
s = summary(keep),
dat.filtered = dat[keep,],
set = makeRUVset(dat = dat.filtered),
counts.set = rownames(counts(set)),
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix),
des = data.frame(specFac, normSet$W),
#formula = "~ specFac + normSet$W",
#formul = as.formula("~species+normSetW-1"),
design = model.matrix(~specFac + W_1 + W_2 + W_3 - 1, data = des),
#design = model.matrix(~geoFac+normSet$W-1)
des.names = c("majalis", "traunsteineri", "nW1", "nW2", "nW3"),
design.names = change_names(data = design, name_list = des.names),
y0 = DGEList(counts = counts(set), group = specFac), # my stuff: counts(set), group = group) # Don't forget, model is taking into account the RUV normalised matrix of counts
#get an idea of how to filter
#cpm = cpm(5, mean(y0$samples$lib.size)),
y1 = calcNormFactors(y0),
y2 = estimateDisp(y1, design = design, robust = T),
pBCV = plotBCV(y2),
fit = glmQLFit(y2, design, robust = T),
hist = hist(fit$coefficients[,1], breaks = 100),
sFit = summary(fit$df.prior),
pQLDisp = plotQLDisp(fit),
con = c(-1,1,0,0,0), #Where the contrasts are chosen
resEdge = glmQLFTest(fit, contrast = con),
de = decideTestsDGE(resEdge, adjust.method="fdr", p.value = 0.05),
is.de = decideTestsDGE(resEdge),
pMD = plotMD(resEdge, status=is.de, values=c(1,0,-1), col=c("blue","black", "red"), legend="topright", pch=19, cex=c(0.5,0.1)),
resEdgeRtopTags = topTags(resEdge, n=nrow(set)),
FDRres = topTags(resEdgeRtopTags, n=nrow(dat))$table
#con <- makeContrasts(traunsteineri - majalis, levels = design)
)
data.featureCounts = read.table("/home/thomas/Documents/phd/de/52KPS/counts52KPS.txt", header = T)
colnames(data.featureCounts)
rownames(data.featureCounts) <- data.featureCounts$Geneid
rownames(data.featureCounts)
head(data.featureCounts)
data.featureCounts$Geneid <- NULL
ncol(data.featureCounts)
data.featureCounts$Chr <- NULL
ncol(data.featureCounts)
data.featureCounts$Start <- NULL
data.featureCounts$End <- NULL
data.featureCounts$Strand <- NULL
data.featureCounts$Length <- NULL
name_list = c("tB1830_1","tB1830_2","tB1833_1","tB1833_2",
"fB1804","fB1855","fP1001","fP1707_1","fP1707_2",
"iA1586","iB1176","iB1870","iS1904","iS1908",
"mA1567_1","mA1567_2","mA1568","mA1573","mA1661","mA1775","mP1722_1","mP1722_2","mP1744","mP1748_1","mP1748_2","mS1757","mS1765_1","mS1765_2",
"tA1553","tA1641","tA1670","tB1798_1","tB1798_2","tB1805_1","tB1805_2","tB1812_1","tB1812_2","tS1901","tS1902","tS1920_1","tS1920_2")
colnames(data.featureCounts)
name_list = c("fB1804","fB1855","fP1001","fP1707_1","fP1707_2",
"iA1586","iB1176","iB1870","iS1904","iS1908",
"mA1568","mA1573","mA1661","mA1775","mP1722_1","mP1722_2","mP1744","mS1757","mS1765_1","mS1765_2",
tA1553","tA1641","tA1670","tB1798_1","tB1798_2","tB1805_1","tB1805_2","tB1812_1","tB1812_2","tB1830_1","tB1830_2","tB1833_1","tB1833_2","tS1901","tS1902","tS1920_1","tS1920_2")
name_list = c("fB1804","fB1855","fP1001","fP1707_1","fP1707_2",
"iA1586","iB1176","iB1870","iS1904","iS1908",
"mA1568","mA1573","mA1661","mA1775","mP1722_1","mP1722_2","mP1744","mS1757","mS1765_1","mS1765_2",
"tA1553","tA1641","tA1670","tB1798_1","tB1798_2","tB1805_1","tB1805_2","tB1812_1","tB1812_2","tB1830_1","tB1830_2","tB1833_1","tB1833_2","tS1901","tS1902","tS1920_1","tS1920_2")
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list)
colnames(data.featureCounts)
colnames(data.featureCounts.names)
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list)
remove_list = c("mA1567_1", "mA1567_2", "mP1748_1", "mP1748_2")
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list)
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," ")
colnames(dat)
species = makeSpeciesVector(dat)
species
specFac = as.factor(species)
batchMatrix = makeBatchMatrix(data = dat)
y0 = DGEList(counts = dat, group = specFac)
keep =  filterByExpr(y0)
summaries(keep)
summary(keep)
dat.filtered = dat[keep,,keep.lib.sizes=FALSE]
set = makeRUVset(dat = y)
plan <- drake_plan(
name_list = c("tB1830_1","tB1830_2","tB1833_1","tB1833_2",
"fB1804","fB1855","fP1001","fP1707_1","fP1707_2",
"iA1586","iB1176","iB1870","iS1904","iS1908",
"mA1567_1","mA1567_2","mA1568","mA1573","mA1661","mA1775","mP1722_1","mP1722_2","mP1744","mP1748_1","mP1748_2","mS1757","mS1765_1","mS1765_2",
"tA1553","tA1641","tA1670","tB1798_1","tB1798_2","tB1805_1","tB1805_2","tB1812_1","tB1812_2","tS1901","tS1902","tS1920_1","tS1920_2"),
remove_list = c("mA1567_1", "mA1567_2", "mP1748_1", "mP1748_2"),
data.featureCounts = read.table("/home/thomas/Documents/phd/de/52KPS/counts52KPS.txt", header = T),
data.featureCounts.names = change_names(data = data.featureCounts, name_list = name_list),
data.featureCounts.clean = remove_id(data.featureCounts.names, remove_list),
dat = selectSpecies(data.featureCounts.clean, "t", "m", " "," "," "),
species = makeSpeciesVector(dat),
specFac = as.factor(species),
batchMatrix = makeBatchMatrix(data = dat),
#check filtering step
#keep = rowSums(cpm(dat)>0.08) >= 10,
y = DGEList(counts = dat, group = specFac),
keep =  filterByExpr(y),
s = summary(keep),
dat.filtered = dat[keep,],
set = makeRUVset(dat = dat.filtered),
counts.set = rownames(counts(set)),
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix),
des = data.frame(specFac, normSet$W),
#formula = "~ specFac + normSet$W",
#formul = as.formula("~species+normSetW-1"),
design = model.matrix(~specFac + W_1 + W_2 + W_3 - 1, data = des),
#design = model.matrix(~geoFac+normSet$W-1)
des.names = c("majalis", "traunsteineri", "nW1", "nW2", "nW3"),
design.names = change_names(data = design, name_list = des.names),
y0 = DGEList(counts = counts(set), group = specFac), # my stuff: counts(set), group = group) # Don't forget, model is taking into account the RUV normalised matrix of counts
#get an idea of how to filter
#cpm = cpm(5, mean(y0$samples$lib.size)),
y1 = calcNormFactors(y0),
y2 = estimateDisp(y1, design = design, robust = T),
pBCV = plotBCV(y2),
fit = glmQLFit(y2, design, robust = T),
hist = hist(fit$coefficients[,1], breaks = 100),
sFit = summary(fit$df.prior),
pQLDisp = plotQLDisp(fit),
con = c(-1,1,0,0,0), #Where the contrasts are chosen
resEdge = glmQLFTest(fit, contrast = con),
de = decideTestsDGE(resEdge, adjust.method="fdr", p.value = 0.05),
is.de = decideTestsDGE(resEdge),
pMD = plotMD(resEdge, status=is.de, values=c(1,0,-1), col=c("blue","black", "red"), legend="topright", pch=19, cex=c(0.5,0.1)),
resEdgeRtopTags = topTags(resEdge, n=nrow(set)),
FDRres = topTags(resEdgeRtopTags, n=nrow(dat))$table
#con <- makeContrasts(traunsteineri - majalis, levels = design)
)
dat.filtered = dat[keep,]
nrow(dat.filtered)
set = makeRUVset(dat = dat.filtered)
counts.set = rownames(counts(set))
normSet = makeRUVrepNormalisedSet(set, counts.set, 3, batchMatrix)
des = data.frame(specFac, normSet$W)
design = model.matrix(~specFac + W_1 + W_2 + W_3 - 1, data = des)
des.names = c("majalis", "traunsteineri", "nW1", "nW2", "nW3")
design.names = change_names(data = design, name_list = des.names)
y0 = DGEList(counts = counts(set), group = specFac)
y1 = calcNormFactors(y0)
y2 = estimateDisp(y1, design = design, robust = T)
pBCV = plotBCV(y2)
fit = glmQLFit(y2, design, robust = T)
hist = hist(fit$coefficients[,1], breaks = 100)
hist = hist(fit$coefficients[,2], breaks = 100)
hist = hist(fit$coefficients[,3], breaks = 100)
hist = hist(fit$coefficients[,4], breaks = 100)
hist = hist(fit$coefficients[,5], breaks = 100)
sFit = summary(fit$df.prior)
sFit = summary(fit$df.prior)
con = c(-1,1,0,0,0)
resEdge = glmQLFTest(fit, contrast = con)
de = decideTestsDGE(resEdge, adjust.method="fdr", p.value = 0.05)
is.de = decideTestsDGE(resEdge)
pMD = plotMD(resEdge, status=is.de, values=c(1,0,-1), col=c("blue","black", "red"), legend="topright", pch=19, cex=c(0.5,0.1))
resEdgeRtopTags = topTags(resEdge, n=nrow(set))
FDRres = topTags(resEdgeRtopTags, n=nrow(dat))$table
FDRres
FDRres[FDRres$FDR<0.05,]
nrow(FDRres[FDRres$FDR<0.05,])
write.table(FDRres, "counts52KPS_de_results.txt")
nrow(FDRres)
